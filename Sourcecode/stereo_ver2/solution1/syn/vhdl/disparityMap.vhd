-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity disparityMap is
generic (
    C_S_AXI_CONTROL_BUS_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_CONTROL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CONTROL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CONTROL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CONTROL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CONTROL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CONTROL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CONTROL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    AXI_LITE_clk : IN STD_LOGIC;
    ap_rst_n_AXI_LITE_clk : IN STD_LOGIC;
    in_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_stream_TUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    in_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    dMapout_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    dMapout_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    dMapout_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    in_stream_TVALID : IN STD_LOGIC;
    in_stream_TREADY : OUT STD_LOGIC;
    dMapout_TVALID : OUT STD_LOGIC;
    dMapout_TREADY : IN STD_LOGIC );
end;


architecture behav of disparityMap is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "disparityMap,hls_ip_2018_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=9.378800,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=148,HLS_SYN_DSP=73,HLS_SYN_FF=20435,HLS_SYN_LUT=21854,HLS_VERSION=2018_3}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal rows_V : STD_LOGIC_VECTOR (31 downto 0);
    signal cols_V : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_rst_n_AXI_LITE_clk_inv : STD_LOGIC;
    signal leftImage_in_V_i_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal leftImage_in_V_i_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal leftImage_in_V_t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal leftImage_in_V_t_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal rightImage_in_V_i_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rightImage_in_V_i_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal rightImage_in_V_t_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal rightImage_in_V_t_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal Block_arrayctor_loop_U0_ap_start : STD_LOGIC;
    signal Block_arrayctor_loop_U0_ap_done : STD_LOGIC;
    signal Block_arrayctor_loop_U0_ap_continue : STD_LOGIC;
    signal Block_arrayctor_loop_U0_ap_idle : STD_LOGIC;
    signal Block_arrayctor_loop_U0_ap_ready : STD_LOGIC;
    signal Block_arrayctor_loop_U0_start_out : STD_LOGIC;
    signal Block_arrayctor_loop_U0_start_write : STD_LOGIC;
    signal Block_arrayctor_loop_U0_packets_out_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_arrayctor_loop_U0_packets_out_out_write : STD_LOGIC;
    signal Block_arrayctor_loop_U0_ap_return_0 : STD_LOGIC_VECTOR (31 downto 0);
    signal Block_arrayctor_loop_U0_ap_return_1 : STD_LOGIC_VECTOR (62 downto 0);
    signal ap_channel_done_tmp_cast_loc_channel : STD_LOGIC;
    signal tmp_cast_loc_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_tmp_cast_loc_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_tmp_cast_loc_channel : STD_LOGIC;
    signal ap_channel_done_col_packets_loc_chan : STD_LOGIC;
    signal col_packets_loc_chan_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_col_packets_loc_chan : STD_LOGIC := '0';
    signal ap_sync_channel_write_col_packets_loc_chan : STD_LOGIC;
    signal Loop_disparityMap_la_U0_ap_start : STD_LOGIC;
    signal Loop_disparityMap_la_U0_ap_done : STD_LOGIC;
    signal Loop_disparityMap_la_U0_ap_continue : STD_LOGIC;
    signal Loop_disparityMap_la_U0_ap_idle : STD_LOGIC;
    signal Loop_disparityMap_la_U0_ap_ready : STD_LOGIC;
    signal Loop_disparityMap_la_U0_in_stream_TREADY : STD_LOGIC;
    signal Loop_disparityMap_la_U0_leftImage_in_V_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal Loop_disparityMap_la_U0_leftImage_in_V_ce0 : STD_LOGIC;
    signal Loop_disparityMap_la_U0_leftImage_in_V_we0 : STD_LOGIC;
    signal Loop_disparityMap_la_U0_leftImage_in_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Loop_disparityMap_la_U0_leftImage_in_V_address1 : STD_LOGIC_VECTOR (16 downto 0);
    signal Loop_disparityMap_la_U0_leftImage_in_V_ce1 : STD_LOGIC;
    signal Loop_disparityMap_la_U0_leftImage_in_V_we1 : STD_LOGIC;
    signal Loop_disparityMap_la_U0_leftImage_in_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal Loop_disparityMap_la_U0_rightImage_in_V_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal Loop_disparityMap_la_U0_rightImage_in_V_ce0 : STD_LOGIC;
    signal Loop_disparityMap_la_U0_rightImage_in_V_we0 : STD_LOGIC;
    signal Loop_disparityMap_la_U0_rightImage_in_V_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Loop_disparityMap_la_U0_rightImage_in_V_address1 : STD_LOGIC_VECTOR (16 downto 0);
    signal Loop_disparityMap_la_U0_rightImage_in_V_ce1 : STD_LOGIC;
    signal Loop_disparityMap_la_U0_rightImage_in_V_we1 : STD_LOGIC;
    signal Loop_disparityMap_la_U0_rightImage_in_V_d1 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_channel_done_rightImage_in_V : STD_LOGIC;
    signal Loop_disparityMap_la_U0_rightImage_in_V_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_rightImage_in_V : STD_LOGIC := '0';
    signal ap_sync_channel_write_rightImage_in_V : STD_LOGIC;
    signal ap_channel_done_leftImage_in_V : STD_LOGIC;
    signal Loop_disparityMap_la_U0_leftImage_in_V_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_leftImage_in_V : STD_LOGIC := '0';
    signal ap_sync_channel_write_leftImage_in_V : STD_LOGIC;
    signal Loop_2_proc_U0_ap_start : STD_LOGIC;
    signal Loop_2_proc_U0_ap_done : STD_LOGIC;
    signal Loop_2_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_2_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_2_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_2_proc_U0_PAR_R_RINV_val_2_2_out_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_2_proc_U0_PAR_R_RINV_val_2_2_out_out_write : STD_LOGIC;
    signal Loop_2_proc_U0_PAR_R_RINV_val_2_1_out_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_2_proc_U0_PAR_R_RINV_val_2_1_out_out_write : STD_LOGIC;
    signal Loop_2_proc_U0_PAR_R_RINV_val_2_0_out_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_2_proc_U0_PAR_R_RINV_val_2_0_out_out_write : STD_LOGIC;
    signal Loop_2_proc_U0_PAR_R_RINV_val_1_2_out_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_2_proc_U0_PAR_R_RINV_val_1_2_out_out_write : STD_LOGIC;
    signal Loop_2_proc_U0_PAR_R_RINV_val_1_1_out_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_2_proc_U0_PAR_R_RINV_val_1_1_out_out_write : STD_LOGIC;
    signal Loop_2_proc_U0_PAR_R_RINV_val_1_0_out_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_2_proc_U0_PAR_R_RINV_val_1_0_out_out_write : STD_LOGIC;
    signal Loop_2_proc_U0_PAR_R_RINV_val_0_2_out_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_2_proc_U0_PAR_R_RINV_val_0_2_out_out_write : STD_LOGIC;
    signal Loop_2_proc_U0_PAR_R_RINV_val_0_1_out_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_2_proc_U0_PAR_R_RINV_val_0_1_out_out_write : STD_LOGIC;
    signal Loop_2_proc_U0_PAR_R_RINV_val_0_0_out_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_2_proc_U0_PAR_R_RINV_val_0_0_out_out_write : STD_LOGIC;
    signal Loop_2_proc_U0_PAR_L_RINV_val_2_2_out_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_2_proc_U0_PAR_L_RINV_val_2_2_out_out_write : STD_LOGIC;
    signal Loop_2_proc_U0_PAR_L_RINV_val_2_1_out_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_2_proc_U0_PAR_L_RINV_val_2_1_out_out_write : STD_LOGIC;
    signal Loop_2_proc_U0_PAR_L_RINV_val_2_0_out_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_2_proc_U0_PAR_L_RINV_val_2_0_out_out_write : STD_LOGIC;
    signal Loop_2_proc_U0_PAR_L_RINV_val_1_2_out_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_2_proc_U0_PAR_L_RINV_val_1_2_out_out_write : STD_LOGIC;
    signal Loop_2_proc_U0_PAR_L_RINV_val_1_1_out_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_2_proc_U0_PAR_L_RINV_val_1_1_out_out_write : STD_LOGIC;
    signal Loop_2_proc_U0_PAR_L_RINV_val_1_0_out_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_2_proc_U0_PAR_L_RINV_val_1_0_out_out_write : STD_LOGIC;
    signal Loop_2_proc_U0_PAR_L_RINV_val_0_2_out_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_2_proc_U0_PAR_L_RINV_val_0_2_out_out_write : STD_LOGIC;
    signal Loop_2_proc_U0_PAR_L_RINV_val_0_1_out_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_2_proc_U0_PAR_L_RINV_val_0_1_out_out_write : STD_LOGIC;
    signal Loop_2_proc_U0_PAR_L_RINV_val_0_0_out_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_2_proc_U0_PAR_L_RINV_val_0_0_out_out_write : STD_LOGIC;
    signal Loop_2_proc_U0_cy2_out_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_2_proc_U0_cy2_out_out_write : STD_LOGIC;
    signal Loop_2_proc_U0_fy2_out_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_2_proc_U0_fy2_out_out_write : STD_LOGIC;
    signal Loop_2_proc_U0_cx2_out_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_2_proc_U0_cx2_out_out_write : STD_LOGIC;
    signal Loop_2_proc_U0_fx2_out_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_2_proc_U0_fx2_out_out_write : STD_LOGIC;
    signal Loop_2_proc_U0_cy1_out_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_2_proc_U0_cy1_out_out_write : STD_LOGIC;
    signal Loop_2_proc_U0_fy1_out_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_2_proc_U0_fy1_out_out_write : STD_LOGIC;
    signal Loop_2_proc_U0_cx1_out_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_2_proc_U0_cx1_out_out_write : STD_LOGIC;
    signal Loop_2_proc_U0_fx1_out_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_2_proc_U0_fx1_out_out_write : STD_LOGIC;
    signal Loop_Loop_Row_proc_U0_ap_start : STD_LOGIC;
    signal Loop_Loop_Row_proc_U0_ap_done : STD_LOGIC;
    signal Loop_Loop_Row_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_Loop_Row_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_Loop_Row_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_Loop_Row_proc_U0_fx1_loc_read : STD_LOGIC;
    signal Loop_Loop_Row_proc_U0_fx2_loc_read : STD_LOGIC;
    signal Loop_Loop_Row_proc_U0_fy1_loc_read : STD_LOGIC;
    signal Loop_Loop_Row_proc_U0_fy2_loc_read : STD_LOGIC;
    signal Loop_Loop_Row_proc_U0_cx1_loc_read : STD_LOGIC;
    signal Loop_Loop_Row_proc_U0_cx2_loc_read : STD_LOGIC;
    signal Loop_Loop_Row_proc_U0_cy1_loc_read : STD_LOGIC;
    signal Loop_Loop_Row_proc_U0_cy2_loc_read : STD_LOGIC;
    signal Loop_Loop_Row_proc_U0_dMap_data_stream_0_V_din : STD_LOGIC_VECTOR (7 downto 0);
    signal Loop_Loop_Row_proc_U0_dMap_data_stream_0_V_write : STD_LOGIC;
    signal Loop_Loop_Row_proc_U0_PAR_L_RINV_val_0_0_loc_read : STD_LOGIC;
    signal Loop_Loop_Row_proc_U0_PAR_L_RINV_val_0_1_loc_read : STD_LOGIC;
    signal Loop_Loop_Row_proc_U0_PAR_L_RINV_val_0_2_loc_read : STD_LOGIC;
    signal Loop_Loop_Row_proc_U0_PAR_L_RINV_val_1_0_loc_read : STD_LOGIC;
    signal Loop_Loop_Row_proc_U0_PAR_L_RINV_val_1_1_loc_read : STD_LOGIC;
    signal Loop_Loop_Row_proc_U0_PAR_L_RINV_val_1_2_loc_read : STD_LOGIC;
    signal Loop_Loop_Row_proc_U0_PAR_L_RINV_val_2_0_loc_read : STD_LOGIC;
    signal Loop_Loop_Row_proc_U0_PAR_L_RINV_val_2_1_loc_read : STD_LOGIC;
    signal Loop_Loop_Row_proc_U0_PAR_L_RINV_val_2_2_loc_read : STD_LOGIC;
    signal Loop_Loop_Row_proc_U0_PAR_R_RINV_val_0_0_loc_read : STD_LOGIC;
    signal Loop_Loop_Row_proc_U0_PAR_R_RINV_val_0_1_loc_read : STD_LOGIC;
    signal Loop_Loop_Row_proc_U0_PAR_R_RINV_val_0_2_loc_read : STD_LOGIC;
    signal Loop_Loop_Row_proc_U0_PAR_R_RINV_val_1_0_loc_read : STD_LOGIC;
    signal Loop_Loop_Row_proc_U0_PAR_R_RINV_val_1_1_loc_read : STD_LOGIC;
    signal Loop_Loop_Row_proc_U0_PAR_R_RINV_val_1_2_loc_read : STD_LOGIC;
    signal Loop_Loop_Row_proc_U0_PAR_R_RINV_val_2_0_loc_read : STD_LOGIC;
    signal Loop_Loop_Row_proc_U0_PAR_R_RINV_val_2_1_loc_read : STD_LOGIC;
    signal Loop_Loop_Row_proc_U0_PAR_R_RINV_val_2_2_loc_read : STD_LOGIC;
    signal Loop_Loop_Row_proc_U0_leftImage_in_V_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal Loop_Loop_Row_proc_U0_leftImage_in_V_ce0 : STD_LOGIC;
    signal Loop_Loop_Row_proc_U0_leftImage_in_V_address1 : STD_LOGIC_VECTOR (16 downto 0);
    signal Loop_Loop_Row_proc_U0_leftImage_in_V_ce1 : STD_LOGIC;
    signal Loop_Loop_Row_proc_U0_rightImage_in_V_address0 : STD_LOGIC_VECTOR (16 downto 0);
    signal Loop_Loop_Row_proc_U0_rightImage_in_V_ce0 : STD_LOGIC;
    signal Loop_Loop_Row_proc_U0_rightImage_in_V_address1 : STD_LOGIC_VECTOR (16 downto 0);
    signal Loop_Loop_Row_proc_U0_rightImage_in_V_ce1 : STD_LOGIC;
    signal Loop_4_proc_U0_ap_start : STD_LOGIC;
    signal Loop_4_proc_U0_ap_done : STD_LOGIC;
    signal Loop_4_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_4_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_4_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_4_proc_U0_packets_loc_read : STD_LOGIC;
    signal Loop_4_proc_U0_dMapout_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_4_proc_U0_dMapout_TVALID : STD_LOGIC;
    signal Loop_4_proc_U0_dMap_data_stream_0_V_read : STD_LOGIC;
    signal Loop_4_proc_U0_dMapout_TUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal Loop_4_proc_U0_dMapout_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal leftImage_in_V_i_full_n : STD_LOGIC;
    signal leftImage_in_V_t_empty_n : STD_LOGIC;
    signal rightImage_in_V_i_full_n : STD_LOGIC;
    signal rightImage_in_V_t_empty_n : STD_LOGIC;
    signal packets_loc_c_full_n : STD_LOGIC;
    signal packets_loc_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal packets_loc_c_empty_n : STD_LOGIC;
    signal col_packets_loc_chan_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal col_packets_loc_chan_empty_n : STD_LOGIC;
    signal tmp_cast_loc_channel_dout : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_cast_loc_channel_empty_n : STD_LOGIC;
    signal PAR_R_RINV_val_2_2_s_full_n : STD_LOGIC;
    signal PAR_R_RINV_val_2_2_s_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal PAR_R_RINV_val_2_2_s_empty_n : STD_LOGIC;
    signal PAR_R_RINV_val_2_1_s_full_n : STD_LOGIC;
    signal PAR_R_RINV_val_2_1_s_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal PAR_R_RINV_val_2_1_s_empty_n : STD_LOGIC;
    signal PAR_R_RINV_val_2_0_s_full_n : STD_LOGIC;
    signal PAR_R_RINV_val_2_0_s_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal PAR_R_RINV_val_2_0_s_empty_n : STD_LOGIC;
    signal PAR_R_RINV_val_1_2_s_full_n : STD_LOGIC;
    signal PAR_R_RINV_val_1_2_s_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal PAR_R_RINV_val_1_2_s_empty_n : STD_LOGIC;
    signal PAR_R_RINV_val_1_1_s_full_n : STD_LOGIC;
    signal PAR_R_RINV_val_1_1_s_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal PAR_R_RINV_val_1_1_s_empty_n : STD_LOGIC;
    signal PAR_R_RINV_val_1_0_s_full_n : STD_LOGIC;
    signal PAR_R_RINV_val_1_0_s_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal PAR_R_RINV_val_1_0_s_empty_n : STD_LOGIC;
    signal PAR_R_RINV_val_0_2_s_full_n : STD_LOGIC;
    signal PAR_R_RINV_val_0_2_s_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal PAR_R_RINV_val_0_2_s_empty_n : STD_LOGIC;
    signal PAR_R_RINV_val_0_1_s_full_n : STD_LOGIC;
    signal PAR_R_RINV_val_0_1_s_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal PAR_R_RINV_val_0_1_s_empty_n : STD_LOGIC;
    signal PAR_R_RINV_val_0_0_s_full_n : STD_LOGIC;
    signal PAR_R_RINV_val_0_0_s_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal PAR_R_RINV_val_0_0_s_empty_n : STD_LOGIC;
    signal PAR_L_RINV_val_2_2_s_full_n : STD_LOGIC;
    signal PAR_L_RINV_val_2_2_s_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal PAR_L_RINV_val_2_2_s_empty_n : STD_LOGIC;
    signal PAR_L_RINV_val_2_1_s_full_n : STD_LOGIC;
    signal PAR_L_RINV_val_2_1_s_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal PAR_L_RINV_val_2_1_s_empty_n : STD_LOGIC;
    signal PAR_L_RINV_val_2_0_s_full_n : STD_LOGIC;
    signal PAR_L_RINV_val_2_0_s_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal PAR_L_RINV_val_2_0_s_empty_n : STD_LOGIC;
    signal PAR_L_RINV_val_1_2_s_full_n : STD_LOGIC;
    signal PAR_L_RINV_val_1_2_s_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal PAR_L_RINV_val_1_2_s_empty_n : STD_LOGIC;
    signal PAR_L_RINV_val_1_1_s_full_n : STD_LOGIC;
    signal PAR_L_RINV_val_1_1_s_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal PAR_L_RINV_val_1_1_s_empty_n : STD_LOGIC;
    signal PAR_L_RINV_val_1_0_s_full_n : STD_LOGIC;
    signal PAR_L_RINV_val_1_0_s_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal PAR_L_RINV_val_1_0_s_empty_n : STD_LOGIC;
    signal PAR_L_RINV_val_0_2_s_full_n : STD_LOGIC;
    signal PAR_L_RINV_val_0_2_s_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal PAR_L_RINV_val_0_2_s_empty_n : STD_LOGIC;
    signal PAR_L_RINV_val_0_1_s_full_n : STD_LOGIC;
    signal PAR_L_RINV_val_0_1_s_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal PAR_L_RINV_val_0_1_s_empty_n : STD_LOGIC;
    signal PAR_L_RINV_val_0_0_s_full_n : STD_LOGIC;
    signal PAR_L_RINV_val_0_0_s_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal PAR_L_RINV_val_0_0_s_empty_n : STD_LOGIC;
    signal cy2_loc_c_full_n : STD_LOGIC;
    signal cy2_loc_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal cy2_loc_c_empty_n : STD_LOGIC;
    signal fy2_loc_c_full_n : STD_LOGIC;
    signal fy2_loc_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal fy2_loc_c_empty_n : STD_LOGIC;
    signal cx2_loc_c_full_n : STD_LOGIC;
    signal cx2_loc_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal cx2_loc_c_empty_n : STD_LOGIC;
    signal fx2_loc_c_full_n : STD_LOGIC;
    signal fx2_loc_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal fx2_loc_c_empty_n : STD_LOGIC;
    signal cy1_loc_c_full_n : STD_LOGIC;
    signal cy1_loc_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal cy1_loc_c_empty_n : STD_LOGIC;
    signal fy1_loc_c_full_n : STD_LOGIC;
    signal fy1_loc_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal fy1_loc_c_empty_n : STD_LOGIC;
    signal cx1_loc_c_full_n : STD_LOGIC;
    signal cx1_loc_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal cx1_loc_c_empty_n : STD_LOGIC;
    signal fx1_loc_c_full_n : STD_LOGIC;
    signal fx1_loc_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal fx1_loc_c_empty_n : STD_LOGIC;
    signal dMap_data_stream_0_s_full_n : STD_LOGIC;
    signal dMap_data_stream_0_s_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal dMap_data_stream_0_s_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_Block_arrayctor_loop_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Block_arrayctor_loop_U0_ap_ready : STD_LOGIC;
    signal Block_arrayctor_loop_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_Loop_disparityMap_la_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Loop_disparityMap_la_U0_ap_ready : STD_LOGIC;
    signal Loop_disparityMap_la_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal ap_sync_reg_Loop_2_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_Loop_2_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_2_proc_U0_ap_ready_count : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal start_for_Loop_4_proc_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Loop_4_proc_U0_full_n : STD_LOGIC;
    signal start_for_Loop_4_proc_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_Loop_4_proc_U0_empty_n : STD_LOGIC;
    signal Loop_disparityMap_la_U0_start_full_n : STD_LOGIC;
    signal Loop_disparityMap_la_U0_start_write : STD_LOGIC;
    signal Loop_2_proc_U0_start_full_n : STD_LOGIC;
    signal Loop_2_proc_U0_start_write : STD_LOGIC;
    signal Loop_Loop_Row_proc_U0_start_full_n : STD_LOGIC;
    signal Loop_Loop_Row_proc_U0_start_write : STD_LOGIC;
    signal Loop_4_proc_U0_start_full_n : STD_LOGIC;
    signal Loop_4_proc_U0_start_write : STD_LOGIC;

    component Block_arrayctor_loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        cols_V : IN STD_LOGIC_VECTOR (31 downto 0);
        rows_V : IN STD_LOGIC_VECTOR (31 downto 0);
        packets_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        packets_out_out_full_n : IN STD_LOGIC;
        packets_out_out_write : OUT STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (62 downto 0) );
    end component;


    component Loop_disparityMap_la IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        rows_V : IN STD_LOGIC_VECTOR (31 downto 0);
        in_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        in_stream_TVALID : IN STD_LOGIC;
        in_stream_TREADY : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (62 downto 0);
        leftImage_in_V_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        leftImage_in_V_ce0 : OUT STD_LOGIC;
        leftImage_in_V_we0 : OUT STD_LOGIC;
        leftImage_in_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        leftImage_in_V_address1 : OUT STD_LOGIC_VECTOR (16 downto 0);
        leftImage_in_V_ce1 : OUT STD_LOGIC;
        leftImage_in_V_we1 : OUT STD_LOGIC;
        leftImage_in_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        rightImage_in_V_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        rightImage_in_V_ce0 : OUT STD_LOGIC;
        rightImage_in_V_we0 : OUT STD_LOGIC;
        rightImage_in_V_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        rightImage_in_V_address1 : OUT STD_LOGIC_VECTOR (16 downto 0);
        rightImage_in_V_ce1 : OUT STD_LOGIC;
        rightImage_in_V_we1 : OUT STD_LOGIC;
        rightImage_in_V_d1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Loop_2_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        PAR_R_RINV_val_2_2_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        PAR_R_RINV_val_2_2_out_out_full_n : IN STD_LOGIC;
        PAR_R_RINV_val_2_2_out_out_write : OUT STD_LOGIC;
        PAR_R_RINV_val_2_1_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        PAR_R_RINV_val_2_1_out_out_full_n : IN STD_LOGIC;
        PAR_R_RINV_val_2_1_out_out_write : OUT STD_LOGIC;
        PAR_R_RINV_val_2_0_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        PAR_R_RINV_val_2_0_out_out_full_n : IN STD_LOGIC;
        PAR_R_RINV_val_2_0_out_out_write : OUT STD_LOGIC;
        PAR_R_RINV_val_1_2_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        PAR_R_RINV_val_1_2_out_out_full_n : IN STD_LOGIC;
        PAR_R_RINV_val_1_2_out_out_write : OUT STD_LOGIC;
        PAR_R_RINV_val_1_1_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        PAR_R_RINV_val_1_1_out_out_full_n : IN STD_LOGIC;
        PAR_R_RINV_val_1_1_out_out_write : OUT STD_LOGIC;
        PAR_R_RINV_val_1_0_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        PAR_R_RINV_val_1_0_out_out_full_n : IN STD_LOGIC;
        PAR_R_RINV_val_1_0_out_out_write : OUT STD_LOGIC;
        PAR_R_RINV_val_0_2_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        PAR_R_RINV_val_0_2_out_out_full_n : IN STD_LOGIC;
        PAR_R_RINV_val_0_2_out_out_write : OUT STD_LOGIC;
        PAR_R_RINV_val_0_1_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        PAR_R_RINV_val_0_1_out_out_full_n : IN STD_LOGIC;
        PAR_R_RINV_val_0_1_out_out_write : OUT STD_LOGIC;
        PAR_R_RINV_val_0_0_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        PAR_R_RINV_val_0_0_out_out_full_n : IN STD_LOGIC;
        PAR_R_RINV_val_0_0_out_out_write : OUT STD_LOGIC;
        PAR_L_RINV_val_2_2_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        PAR_L_RINV_val_2_2_out_out_full_n : IN STD_LOGIC;
        PAR_L_RINV_val_2_2_out_out_write : OUT STD_LOGIC;
        PAR_L_RINV_val_2_1_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        PAR_L_RINV_val_2_1_out_out_full_n : IN STD_LOGIC;
        PAR_L_RINV_val_2_1_out_out_write : OUT STD_LOGIC;
        PAR_L_RINV_val_2_0_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        PAR_L_RINV_val_2_0_out_out_full_n : IN STD_LOGIC;
        PAR_L_RINV_val_2_0_out_out_write : OUT STD_LOGIC;
        PAR_L_RINV_val_1_2_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        PAR_L_RINV_val_1_2_out_out_full_n : IN STD_LOGIC;
        PAR_L_RINV_val_1_2_out_out_write : OUT STD_LOGIC;
        PAR_L_RINV_val_1_1_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        PAR_L_RINV_val_1_1_out_out_full_n : IN STD_LOGIC;
        PAR_L_RINV_val_1_1_out_out_write : OUT STD_LOGIC;
        PAR_L_RINV_val_1_0_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        PAR_L_RINV_val_1_0_out_out_full_n : IN STD_LOGIC;
        PAR_L_RINV_val_1_0_out_out_write : OUT STD_LOGIC;
        PAR_L_RINV_val_0_2_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        PAR_L_RINV_val_0_2_out_out_full_n : IN STD_LOGIC;
        PAR_L_RINV_val_0_2_out_out_write : OUT STD_LOGIC;
        PAR_L_RINV_val_0_1_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        PAR_L_RINV_val_0_1_out_out_full_n : IN STD_LOGIC;
        PAR_L_RINV_val_0_1_out_out_write : OUT STD_LOGIC;
        PAR_L_RINV_val_0_0_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        PAR_L_RINV_val_0_0_out_out_full_n : IN STD_LOGIC;
        PAR_L_RINV_val_0_0_out_out_write : OUT STD_LOGIC;
        cy2_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        cy2_out_out_full_n : IN STD_LOGIC;
        cy2_out_out_write : OUT STD_LOGIC;
        fy2_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        fy2_out_out_full_n : IN STD_LOGIC;
        fy2_out_out_write : OUT STD_LOGIC;
        cx2_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        cx2_out_out_full_n : IN STD_LOGIC;
        cx2_out_out_write : OUT STD_LOGIC;
        fx2_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        fx2_out_out_full_n : IN STD_LOGIC;
        fx2_out_out_write : OUT STD_LOGIC;
        cy1_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        cy1_out_out_full_n : IN STD_LOGIC;
        cy1_out_out_write : OUT STD_LOGIC;
        fy1_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        fy1_out_out_full_n : IN STD_LOGIC;
        fy1_out_out_write : OUT STD_LOGIC;
        cx1_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        cx1_out_out_full_n : IN STD_LOGIC;
        cx1_out_out_write : OUT STD_LOGIC;
        fx1_out_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        fx1_out_out_full_n : IN STD_LOGIC;
        fx1_out_out_write : OUT STD_LOGIC );
    end component;


    component Loop_Loop_Row_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        fx1_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        fx1_loc_empty_n : IN STD_LOGIC;
        fx1_loc_read : OUT STD_LOGIC;
        fx2_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        fx2_loc_empty_n : IN STD_LOGIC;
        fx2_loc_read : OUT STD_LOGIC;
        fy1_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        fy1_loc_empty_n : IN STD_LOGIC;
        fy1_loc_read : OUT STD_LOGIC;
        fy2_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        fy2_loc_empty_n : IN STD_LOGIC;
        fy2_loc_read : OUT STD_LOGIC;
        cx1_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        cx1_loc_empty_n : IN STD_LOGIC;
        cx1_loc_read : OUT STD_LOGIC;
        cx2_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        cx2_loc_empty_n : IN STD_LOGIC;
        cx2_loc_read : OUT STD_LOGIC;
        cy1_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        cy1_loc_empty_n : IN STD_LOGIC;
        cy1_loc_read : OUT STD_LOGIC;
        cy2_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        cy2_loc_empty_n : IN STD_LOGIC;
        cy2_loc_read : OUT STD_LOGIC;
        rows_V : IN STD_LOGIC_VECTOR (31 downto 0);
        cols_V : IN STD_LOGIC_VECTOR (31 downto 0);
        dMap_data_stream_0_V_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        dMap_data_stream_0_V_full_n : IN STD_LOGIC;
        dMap_data_stream_0_V_write : OUT STD_LOGIC;
        PAR_L_RINV_val_0_0_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        PAR_L_RINV_val_0_0_loc_empty_n : IN STD_LOGIC;
        PAR_L_RINV_val_0_0_loc_read : OUT STD_LOGIC;
        PAR_L_RINV_val_0_1_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        PAR_L_RINV_val_0_1_loc_empty_n : IN STD_LOGIC;
        PAR_L_RINV_val_0_1_loc_read : OUT STD_LOGIC;
        PAR_L_RINV_val_0_2_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        PAR_L_RINV_val_0_2_loc_empty_n : IN STD_LOGIC;
        PAR_L_RINV_val_0_2_loc_read : OUT STD_LOGIC;
        PAR_L_RINV_val_1_0_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        PAR_L_RINV_val_1_0_loc_empty_n : IN STD_LOGIC;
        PAR_L_RINV_val_1_0_loc_read : OUT STD_LOGIC;
        PAR_L_RINV_val_1_1_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        PAR_L_RINV_val_1_1_loc_empty_n : IN STD_LOGIC;
        PAR_L_RINV_val_1_1_loc_read : OUT STD_LOGIC;
        PAR_L_RINV_val_1_2_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        PAR_L_RINV_val_1_2_loc_empty_n : IN STD_LOGIC;
        PAR_L_RINV_val_1_2_loc_read : OUT STD_LOGIC;
        PAR_L_RINV_val_2_0_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        PAR_L_RINV_val_2_0_loc_empty_n : IN STD_LOGIC;
        PAR_L_RINV_val_2_0_loc_read : OUT STD_LOGIC;
        PAR_L_RINV_val_2_1_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        PAR_L_RINV_val_2_1_loc_empty_n : IN STD_LOGIC;
        PAR_L_RINV_val_2_1_loc_read : OUT STD_LOGIC;
        PAR_L_RINV_val_2_2_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        PAR_L_RINV_val_2_2_loc_empty_n : IN STD_LOGIC;
        PAR_L_RINV_val_2_2_loc_read : OUT STD_LOGIC;
        PAR_R_RINV_val_0_0_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        PAR_R_RINV_val_0_0_loc_empty_n : IN STD_LOGIC;
        PAR_R_RINV_val_0_0_loc_read : OUT STD_LOGIC;
        PAR_R_RINV_val_0_1_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        PAR_R_RINV_val_0_1_loc_empty_n : IN STD_LOGIC;
        PAR_R_RINV_val_0_1_loc_read : OUT STD_LOGIC;
        PAR_R_RINV_val_0_2_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        PAR_R_RINV_val_0_2_loc_empty_n : IN STD_LOGIC;
        PAR_R_RINV_val_0_2_loc_read : OUT STD_LOGIC;
        PAR_R_RINV_val_1_0_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        PAR_R_RINV_val_1_0_loc_empty_n : IN STD_LOGIC;
        PAR_R_RINV_val_1_0_loc_read : OUT STD_LOGIC;
        PAR_R_RINV_val_1_1_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        PAR_R_RINV_val_1_1_loc_empty_n : IN STD_LOGIC;
        PAR_R_RINV_val_1_1_loc_read : OUT STD_LOGIC;
        PAR_R_RINV_val_1_2_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        PAR_R_RINV_val_1_2_loc_empty_n : IN STD_LOGIC;
        PAR_R_RINV_val_1_2_loc_read : OUT STD_LOGIC;
        PAR_R_RINV_val_2_0_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        PAR_R_RINV_val_2_0_loc_empty_n : IN STD_LOGIC;
        PAR_R_RINV_val_2_0_loc_read : OUT STD_LOGIC;
        PAR_R_RINV_val_2_1_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        PAR_R_RINV_val_2_1_loc_empty_n : IN STD_LOGIC;
        PAR_R_RINV_val_2_1_loc_read : OUT STD_LOGIC;
        PAR_R_RINV_val_2_2_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        PAR_R_RINV_val_2_2_loc_empty_n : IN STD_LOGIC;
        PAR_R_RINV_val_2_2_loc_read : OUT STD_LOGIC;
        leftImage_in_V_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        leftImage_in_V_ce0 : OUT STD_LOGIC;
        leftImage_in_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        leftImage_in_V_address1 : OUT STD_LOGIC_VECTOR (16 downto 0);
        leftImage_in_V_ce1 : OUT STD_LOGIC;
        leftImage_in_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
        rightImage_in_V_address0 : OUT STD_LOGIC_VECTOR (16 downto 0);
        rightImage_in_V_ce0 : OUT STD_LOGIC;
        rightImage_in_V_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
        rightImage_in_V_address1 : OUT STD_LOGIC_VECTOR (16 downto 0);
        rightImage_in_V_ce1 : OUT STD_LOGIC;
        rightImage_in_V_q1 : IN STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component Loop_4_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        packets_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        packets_loc_empty_n : IN STD_LOGIC;
        packets_loc_read : OUT STD_LOGIC;
        cols_V : IN STD_LOGIC_VECTOR (31 downto 0);
        rows_V : IN STD_LOGIC_VECTOR (31 downto 0);
        dMapout_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        dMapout_TVALID : OUT STD_LOGIC;
        dMapout_TREADY : IN STD_LOGIC;
        dMap_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        dMap_data_stream_0_V_empty_n : IN STD_LOGIC;
        dMap_data_stream_0_V_read : OUT STD_LOGIC;
        dMapout_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        dMapout_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component disparityMap_leftKfY IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        i_address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        i_ce0 : IN STD_LOGIC;
        i_we0 : IN STD_LOGIC;
        i_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        i_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        i_address1 : IN STD_LOGIC_VECTOR (16 downto 0);
        i_ce1 : IN STD_LOGIC;
        i_we1 : IN STD_LOGIC;
        i_d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        i_q1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        t_address0 : IN STD_LOGIC_VECTOR (16 downto 0);
        t_ce0 : IN STD_LOGIC;
        t_we0 : IN STD_LOGIC;
        t_d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        t_q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        t_address1 : IN STD_LOGIC_VECTOR (16 downto 0);
        t_ce1 : IN STD_LOGIC;
        t_we1 : IN STD_LOGIC;
        t_d1 : IN STD_LOGIC_VECTOR (7 downto 0);
        t_q1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        i_ce : IN STD_LOGIC;
        t_ce : IN STD_LOGIC;
        i_full_n : OUT STD_LOGIC;
        i_write : IN STD_LOGIC;
        t_empty_n : OUT STD_LOGIC;
        t_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d4_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w63_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (62 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (62 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w32_d3_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_Loop_4_Mgi IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component disparityMap_CONTROL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        rows_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        cols_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        rst : IN STD_LOGIC );
    end component;



begin
    disparityMap_CONTROL_BUS_s_axi_U : component disparityMap_CONTROL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CONTROL_BUS_AWVALID,
        AWREADY => s_axi_CONTROL_BUS_AWREADY,
        AWADDR => s_axi_CONTROL_BUS_AWADDR,
        WVALID => s_axi_CONTROL_BUS_WVALID,
        WREADY => s_axi_CONTROL_BUS_WREADY,
        WDATA => s_axi_CONTROL_BUS_WDATA,
        WSTRB => s_axi_CONTROL_BUS_WSTRB,
        ARVALID => s_axi_CONTROL_BUS_ARVALID,
        ARREADY => s_axi_CONTROL_BUS_ARREADY,
        ARADDR => s_axi_CONTROL_BUS_ARADDR,
        RVALID => s_axi_CONTROL_BUS_RVALID,
        RREADY => s_axi_CONTROL_BUS_RREADY,
        RDATA => s_axi_CONTROL_BUS_RDATA,
        RRESP => s_axi_CONTROL_BUS_RRESP,
        BVALID => s_axi_CONTROL_BUS_BVALID,
        BREADY => s_axi_CONTROL_BUS_BREADY,
        BRESP => s_axi_CONTROL_BUS_BRESP,
        ACLK => AXI_LITE_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        rows_V => rows_V,
        cols_V => cols_V,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        clk => ap_clk,
        rst => ap_rst_n_AXI_LITE_clk_inv);

    leftImage_in_V_U : component disparityMap_leftKfY
    generic map (
        DataWidth => 8,
        AddressRange => 97200,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => Loop_disparityMap_la_U0_leftImage_in_V_address0,
        i_ce0 => Loop_disparityMap_la_U0_leftImage_in_V_ce0,
        i_we0 => Loop_disparityMap_la_U0_leftImage_in_V_we0,
        i_d0 => Loop_disparityMap_la_U0_leftImage_in_V_d0,
        i_q0 => leftImage_in_V_i_q0,
        i_address1 => Loop_disparityMap_la_U0_leftImage_in_V_address1,
        i_ce1 => Loop_disparityMap_la_U0_leftImage_in_V_ce1,
        i_we1 => Loop_disparityMap_la_U0_leftImage_in_V_we1,
        i_d1 => Loop_disparityMap_la_U0_leftImage_in_V_d1,
        i_q1 => leftImage_in_V_i_q1,
        t_address0 => Loop_Loop_Row_proc_U0_leftImage_in_V_address0,
        t_ce0 => Loop_Loop_Row_proc_U0_leftImage_in_V_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv8_0,
        t_q0 => leftImage_in_V_t_q0,
        t_address1 => Loop_Loop_Row_proc_U0_leftImage_in_V_address1,
        t_ce1 => Loop_Loop_Row_proc_U0_leftImage_in_V_ce1,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv8_0,
        t_q1 => leftImage_in_V_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => leftImage_in_V_i_full_n,
        i_write => ap_channel_done_leftImage_in_V,
        t_empty_n => leftImage_in_V_t_empty_n,
        t_read => Loop_Loop_Row_proc_U0_ap_ready);

    rightImage_in_V_U : component disparityMap_leftKfY
    generic map (
        DataWidth => 8,
        AddressRange => 97200,
        AddressWidth => 17)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        i_address0 => Loop_disparityMap_la_U0_rightImage_in_V_address0,
        i_ce0 => Loop_disparityMap_la_U0_rightImage_in_V_ce0,
        i_we0 => Loop_disparityMap_la_U0_rightImage_in_V_we0,
        i_d0 => Loop_disparityMap_la_U0_rightImage_in_V_d0,
        i_q0 => rightImage_in_V_i_q0,
        i_address1 => Loop_disparityMap_la_U0_rightImage_in_V_address1,
        i_ce1 => Loop_disparityMap_la_U0_rightImage_in_V_ce1,
        i_we1 => Loop_disparityMap_la_U0_rightImage_in_V_we1,
        i_d1 => Loop_disparityMap_la_U0_rightImage_in_V_d1,
        i_q1 => rightImage_in_V_i_q1,
        t_address0 => Loop_Loop_Row_proc_U0_rightImage_in_V_address0,
        t_ce0 => Loop_Loop_Row_proc_U0_rightImage_in_V_ce0,
        t_we0 => ap_const_logic_0,
        t_d0 => ap_const_lv8_0,
        t_q0 => rightImage_in_V_t_q0,
        t_address1 => Loop_Loop_Row_proc_U0_rightImage_in_V_address1,
        t_ce1 => Loop_Loop_Row_proc_U0_rightImage_in_V_ce1,
        t_we1 => ap_const_logic_0,
        t_d1 => ap_const_lv8_0,
        t_q1 => rightImage_in_V_t_q1,
        i_ce => ap_const_logic_1,
        t_ce => ap_const_logic_1,
        i_full_n => rightImage_in_V_i_full_n,
        i_write => ap_channel_done_rightImage_in_V,
        t_empty_n => rightImage_in_V_t_empty_n,
        t_read => Loop_Loop_Row_proc_U0_ap_ready);

    Block_arrayctor_loop_U0 : component Block_arrayctor_loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Block_arrayctor_loop_U0_ap_start,
        start_full_n => start_for_Loop_4_proc_U0_full_n,
        ap_done => Block_arrayctor_loop_U0_ap_done,
        ap_continue => Block_arrayctor_loop_U0_ap_continue,
        ap_idle => Block_arrayctor_loop_U0_ap_idle,
        ap_ready => Block_arrayctor_loop_U0_ap_ready,
        start_out => Block_arrayctor_loop_U0_start_out,
        start_write => Block_arrayctor_loop_U0_start_write,
        cols_V => cols_V,
        rows_V => rows_V,
        packets_out_out_din => Block_arrayctor_loop_U0_packets_out_out_din,
        packets_out_out_full_n => packets_loc_c_full_n,
        packets_out_out_write => Block_arrayctor_loop_U0_packets_out_out_write,
        ap_return_0 => Block_arrayctor_loop_U0_ap_return_0,
        ap_return_1 => Block_arrayctor_loop_U0_ap_return_1);

    Loop_disparityMap_la_U0 : component Loop_disparityMap_la
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_disparityMap_la_U0_ap_start,
        ap_done => Loop_disparityMap_la_U0_ap_done,
        ap_continue => Loop_disparityMap_la_U0_ap_continue,
        ap_idle => Loop_disparityMap_la_U0_ap_idle,
        ap_ready => Loop_disparityMap_la_U0_ap_ready,
        rows_V => rows_V,
        in_stream_TDATA => in_stream_TDATA,
        in_stream_TVALID => in_stream_TVALID,
        in_stream_TREADY => Loop_disparityMap_la_U0_in_stream_TREADY,
        p_read => col_packets_loc_chan_dout,
        p_read1 => tmp_cast_loc_channel_dout,
        leftImage_in_V_address0 => Loop_disparityMap_la_U0_leftImage_in_V_address0,
        leftImage_in_V_ce0 => Loop_disparityMap_la_U0_leftImage_in_V_ce0,
        leftImage_in_V_we0 => Loop_disparityMap_la_U0_leftImage_in_V_we0,
        leftImage_in_V_d0 => Loop_disparityMap_la_U0_leftImage_in_V_d0,
        leftImage_in_V_address1 => Loop_disparityMap_la_U0_leftImage_in_V_address1,
        leftImage_in_V_ce1 => Loop_disparityMap_la_U0_leftImage_in_V_ce1,
        leftImage_in_V_we1 => Loop_disparityMap_la_U0_leftImage_in_V_we1,
        leftImage_in_V_d1 => Loop_disparityMap_la_U0_leftImage_in_V_d1,
        rightImage_in_V_address0 => Loop_disparityMap_la_U0_rightImage_in_V_address0,
        rightImage_in_V_ce0 => Loop_disparityMap_la_U0_rightImage_in_V_ce0,
        rightImage_in_V_we0 => Loop_disparityMap_la_U0_rightImage_in_V_we0,
        rightImage_in_V_d0 => Loop_disparityMap_la_U0_rightImage_in_V_d0,
        rightImage_in_V_address1 => Loop_disparityMap_la_U0_rightImage_in_V_address1,
        rightImage_in_V_ce1 => Loop_disparityMap_la_U0_rightImage_in_V_ce1,
        rightImage_in_V_we1 => Loop_disparityMap_la_U0_rightImage_in_V_we1,
        rightImage_in_V_d1 => Loop_disparityMap_la_U0_rightImage_in_V_d1);

    Loop_2_proc_U0 : component Loop_2_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_2_proc_U0_ap_start,
        ap_done => Loop_2_proc_U0_ap_done,
        ap_continue => Loop_2_proc_U0_ap_continue,
        ap_idle => Loop_2_proc_U0_ap_idle,
        ap_ready => Loop_2_proc_U0_ap_ready,
        PAR_R_RINV_val_2_2_out_out_din => Loop_2_proc_U0_PAR_R_RINV_val_2_2_out_out_din,
        PAR_R_RINV_val_2_2_out_out_full_n => PAR_R_RINV_val_2_2_s_full_n,
        PAR_R_RINV_val_2_2_out_out_write => Loop_2_proc_U0_PAR_R_RINV_val_2_2_out_out_write,
        PAR_R_RINV_val_2_1_out_out_din => Loop_2_proc_U0_PAR_R_RINV_val_2_1_out_out_din,
        PAR_R_RINV_val_2_1_out_out_full_n => PAR_R_RINV_val_2_1_s_full_n,
        PAR_R_RINV_val_2_1_out_out_write => Loop_2_proc_U0_PAR_R_RINV_val_2_1_out_out_write,
        PAR_R_RINV_val_2_0_out_out_din => Loop_2_proc_U0_PAR_R_RINV_val_2_0_out_out_din,
        PAR_R_RINV_val_2_0_out_out_full_n => PAR_R_RINV_val_2_0_s_full_n,
        PAR_R_RINV_val_2_0_out_out_write => Loop_2_proc_U0_PAR_R_RINV_val_2_0_out_out_write,
        PAR_R_RINV_val_1_2_out_out_din => Loop_2_proc_U0_PAR_R_RINV_val_1_2_out_out_din,
        PAR_R_RINV_val_1_2_out_out_full_n => PAR_R_RINV_val_1_2_s_full_n,
        PAR_R_RINV_val_1_2_out_out_write => Loop_2_proc_U0_PAR_R_RINV_val_1_2_out_out_write,
        PAR_R_RINV_val_1_1_out_out_din => Loop_2_proc_U0_PAR_R_RINV_val_1_1_out_out_din,
        PAR_R_RINV_val_1_1_out_out_full_n => PAR_R_RINV_val_1_1_s_full_n,
        PAR_R_RINV_val_1_1_out_out_write => Loop_2_proc_U0_PAR_R_RINV_val_1_1_out_out_write,
        PAR_R_RINV_val_1_0_out_out_din => Loop_2_proc_U0_PAR_R_RINV_val_1_0_out_out_din,
        PAR_R_RINV_val_1_0_out_out_full_n => PAR_R_RINV_val_1_0_s_full_n,
        PAR_R_RINV_val_1_0_out_out_write => Loop_2_proc_U0_PAR_R_RINV_val_1_0_out_out_write,
        PAR_R_RINV_val_0_2_out_out_din => Loop_2_proc_U0_PAR_R_RINV_val_0_2_out_out_din,
        PAR_R_RINV_val_0_2_out_out_full_n => PAR_R_RINV_val_0_2_s_full_n,
        PAR_R_RINV_val_0_2_out_out_write => Loop_2_proc_U0_PAR_R_RINV_val_0_2_out_out_write,
        PAR_R_RINV_val_0_1_out_out_din => Loop_2_proc_U0_PAR_R_RINV_val_0_1_out_out_din,
        PAR_R_RINV_val_0_1_out_out_full_n => PAR_R_RINV_val_0_1_s_full_n,
        PAR_R_RINV_val_0_1_out_out_write => Loop_2_proc_U0_PAR_R_RINV_val_0_1_out_out_write,
        PAR_R_RINV_val_0_0_out_out_din => Loop_2_proc_U0_PAR_R_RINV_val_0_0_out_out_din,
        PAR_R_RINV_val_0_0_out_out_full_n => PAR_R_RINV_val_0_0_s_full_n,
        PAR_R_RINV_val_0_0_out_out_write => Loop_2_proc_U0_PAR_R_RINV_val_0_0_out_out_write,
        PAR_L_RINV_val_2_2_out_out_din => Loop_2_proc_U0_PAR_L_RINV_val_2_2_out_out_din,
        PAR_L_RINV_val_2_2_out_out_full_n => PAR_L_RINV_val_2_2_s_full_n,
        PAR_L_RINV_val_2_2_out_out_write => Loop_2_proc_U0_PAR_L_RINV_val_2_2_out_out_write,
        PAR_L_RINV_val_2_1_out_out_din => Loop_2_proc_U0_PAR_L_RINV_val_2_1_out_out_din,
        PAR_L_RINV_val_2_1_out_out_full_n => PAR_L_RINV_val_2_1_s_full_n,
        PAR_L_RINV_val_2_1_out_out_write => Loop_2_proc_U0_PAR_L_RINV_val_2_1_out_out_write,
        PAR_L_RINV_val_2_0_out_out_din => Loop_2_proc_U0_PAR_L_RINV_val_2_0_out_out_din,
        PAR_L_RINV_val_2_0_out_out_full_n => PAR_L_RINV_val_2_0_s_full_n,
        PAR_L_RINV_val_2_0_out_out_write => Loop_2_proc_U0_PAR_L_RINV_val_2_0_out_out_write,
        PAR_L_RINV_val_1_2_out_out_din => Loop_2_proc_U0_PAR_L_RINV_val_1_2_out_out_din,
        PAR_L_RINV_val_1_2_out_out_full_n => PAR_L_RINV_val_1_2_s_full_n,
        PAR_L_RINV_val_1_2_out_out_write => Loop_2_proc_U0_PAR_L_RINV_val_1_2_out_out_write,
        PAR_L_RINV_val_1_1_out_out_din => Loop_2_proc_U0_PAR_L_RINV_val_1_1_out_out_din,
        PAR_L_RINV_val_1_1_out_out_full_n => PAR_L_RINV_val_1_1_s_full_n,
        PAR_L_RINV_val_1_1_out_out_write => Loop_2_proc_U0_PAR_L_RINV_val_1_1_out_out_write,
        PAR_L_RINV_val_1_0_out_out_din => Loop_2_proc_U0_PAR_L_RINV_val_1_0_out_out_din,
        PAR_L_RINV_val_1_0_out_out_full_n => PAR_L_RINV_val_1_0_s_full_n,
        PAR_L_RINV_val_1_0_out_out_write => Loop_2_proc_U0_PAR_L_RINV_val_1_0_out_out_write,
        PAR_L_RINV_val_0_2_out_out_din => Loop_2_proc_U0_PAR_L_RINV_val_0_2_out_out_din,
        PAR_L_RINV_val_0_2_out_out_full_n => PAR_L_RINV_val_0_2_s_full_n,
        PAR_L_RINV_val_0_2_out_out_write => Loop_2_proc_U0_PAR_L_RINV_val_0_2_out_out_write,
        PAR_L_RINV_val_0_1_out_out_din => Loop_2_proc_U0_PAR_L_RINV_val_0_1_out_out_din,
        PAR_L_RINV_val_0_1_out_out_full_n => PAR_L_RINV_val_0_1_s_full_n,
        PAR_L_RINV_val_0_1_out_out_write => Loop_2_proc_U0_PAR_L_RINV_val_0_1_out_out_write,
        PAR_L_RINV_val_0_0_out_out_din => Loop_2_proc_U0_PAR_L_RINV_val_0_0_out_out_din,
        PAR_L_RINV_val_0_0_out_out_full_n => PAR_L_RINV_val_0_0_s_full_n,
        PAR_L_RINV_val_0_0_out_out_write => Loop_2_proc_U0_PAR_L_RINV_val_0_0_out_out_write,
        cy2_out_out_din => Loop_2_proc_U0_cy2_out_out_din,
        cy2_out_out_full_n => cy2_loc_c_full_n,
        cy2_out_out_write => Loop_2_proc_U0_cy2_out_out_write,
        fy2_out_out_din => Loop_2_proc_U0_fy2_out_out_din,
        fy2_out_out_full_n => fy2_loc_c_full_n,
        fy2_out_out_write => Loop_2_proc_U0_fy2_out_out_write,
        cx2_out_out_din => Loop_2_proc_U0_cx2_out_out_din,
        cx2_out_out_full_n => cx2_loc_c_full_n,
        cx2_out_out_write => Loop_2_proc_U0_cx2_out_out_write,
        fx2_out_out_din => Loop_2_proc_U0_fx2_out_out_din,
        fx2_out_out_full_n => fx2_loc_c_full_n,
        fx2_out_out_write => Loop_2_proc_U0_fx2_out_out_write,
        cy1_out_out_din => Loop_2_proc_U0_cy1_out_out_din,
        cy1_out_out_full_n => cy1_loc_c_full_n,
        cy1_out_out_write => Loop_2_proc_U0_cy1_out_out_write,
        fy1_out_out_din => Loop_2_proc_U0_fy1_out_out_din,
        fy1_out_out_full_n => fy1_loc_c_full_n,
        fy1_out_out_write => Loop_2_proc_U0_fy1_out_out_write,
        cx1_out_out_din => Loop_2_proc_U0_cx1_out_out_din,
        cx1_out_out_full_n => cx1_loc_c_full_n,
        cx1_out_out_write => Loop_2_proc_U0_cx1_out_out_write,
        fx1_out_out_din => Loop_2_proc_U0_fx1_out_out_din,
        fx1_out_out_full_n => fx1_loc_c_full_n,
        fx1_out_out_write => Loop_2_proc_U0_fx1_out_out_write);

    Loop_Loop_Row_proc_U0 : component Loop_Loop_Row_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_Loop_Row_proc_U0_ap_start,
        ap_done => Loop_Loop_Row_proc_U0_ap_done,
        ap_continue => Loop_Loop_Row_proc_U0_ap_continue,
        ap_idle => Loop_Loop_Row_proc_U0_ap_idle,
        ap_ready => Loop_Loop_Row_proc_U0_ap_ready,
        fx1_loc_dout => fx1_loc_c_dout,
        fx1_loc_empty_n => fx1_loc_c_empty_n,
        fx1_loc_read => Loop_Loop_Row_proc_U0_fx1_loc_read,
        fx2_loc_dout => fx2_loc_c_dout,
        fx2_loc_empty_n => fx2_loc_c_empty_n,
        fx2_loc_read => Loop_Loop_Row_proc_U0_fx2_loc_read,
        fy1_loc_dout => fy1_loc_c_dout,
        fy1_loc_empty_n => fy1_loc_c_empty_n,
        fy1_loc_read => Loop_Loop_Row_proc_U0_fy1_loc_read,
        fy2_loc_dout => fy2_loc_c_dout,
        fy2_loc_empty_n => fy2_loc_c_empty_n,
        fy2_loc_read => Loop_Loop_Row_proc_U0_fy2_loc_read,
        cx1_loc_dout => cx1_loc_c_dout,
        cx1_loc_empty_n => cx1_loc_c_empty_n,
        cx1_loc_read => Loop_Loop_Row_proc_U0_cx1_loc_read,
        cx2_loc_dout => cx2_loc_c_dout,
        cx2_loc_empty_n => cx2_loc_c_empty_n,
        cx2_loc_read => Loop_Loop_Row_proc_U0_cx2_loc_read,
        cy1_loc_dout => cy1_loc_c_dout,
        cy1_loc_empty_n => cy1_loc_c_empty_n,
        cy1_loc_read => Loop_Loop_Row_proc_U0_cy1_loc_read,
        cy2_loc_dout => cy2_loc_c_dout,
        cy2_loc_empty_n => cy2_loc_c_empty_n,
        cy2_loc_read => Loop_Loop_Row_proc_U0_cy2_loc_read,
        rows_V => rows_V,
        cols_V => cols_V,
        dMap_data_stream_0_V_din => Loop_Loop_Row_proc_U0_dMap_data_stream_0_V_din,
        dMap_data_stream_0_V_full_n => dMap_data_stream_0_s_full_n,
        dMap_data_stream_0_V_write => Loop_Loop_Row_proc_U0_dMap_data_stream_0_V_write,
        PAR_L_RINV_val_0_0_loc_dout => PAR_L_RINV_val_0_0_s_dout,
        PAR_L_RINV_val_0_0_loc_empty_n => PAR_L_RINV_val_0_0_s_empty_n,
        PAR_L_RINV_val_0_0_loc_read => Loop_Loop_Row_proc_U0_PAR_L_RINV_val_0_0_loc_read,
        PAR_L_RINV_val_0_1_loc_dout => PAR_L_RINV_val_0_1_s_dout,
        PAR_L_RINV_val_0_1_loc_empty_n => PAR_L_RINV_val_0_1_s_empty_n,
        PAR_L_RINV_val_0_1_loc_read => Loop_Loop_Row_proc_U0_PAR_L_RINV_val_0_1_loc_read,
        PAR_L_RINV_val_0_2_loc_dout => PAR_L_RINV_val_0_2_s_dout,
        PAR_L_RINV_val_0_2_loc_empty_n => PAR_L_RINV_val_0_2_s_empty_n,
        PAR_L_RINV_val_0_2_loc_read => Loop_Loop_Row_proc_U0_PAR_L_RINV_val_0_2_loc_read,
        PAR_L_RINV_val_1_0_loc_dout => PAR_L_RINV_val_1_0_s_dout,
        PAR_L_RINV_val_1_0_loc_empty_n => PAR_L_RINV_val_1_0_s_empty_n,
        PAR_L_RINV_val_1_0_loc_read => Loop_Loop_Row_proc_U0_PAR_L_RINV_val_1_0_loc_read,
        PAR_L_RINV_val_1_1_loc_dout => PAR_L_RINV_val_1_1_s_dout,
        PAR_L_RINV_val_1_1_loc_empty_n => PAR_L_RINV_val_1_1_s_empty_n,
        PAR_L_RINV_val_1_1_loc_read => Loop_Loop_Row_proc_U0_PAR_L_RINV_val_1_1_loc_read,
        PAR_L_RINV_val_1_2_loc_dout => PAR_L_RINV_val_1_2_s_dout,
        PAR_L_RINV_val_1_2_loc_empty_n => PAR_L_RINV_val_1_2_s_empty_n,
        PAR_L_RINV_val_1_2_loc_read => Loop_Loop_Row_proc_U0_PAR_L_RINV_val_1_2_loc_read,
        PAR_L_RINV_val_2_0_loc_dout => PAR_L_RINV_val_2_0_s_dout,
        PAR_L_RINV_val_2_0_loc_empty_n => PAR_L_RINV_val_2_0_s_empty_n,
        PAR_L_RINV_val_2_0_loc_read => Loop_Loop_Row_proc_U0_PAR_L_RINV_val_2_0_loc_read,
        PAR_L_RINV_val_2_1_loc_dout => PAR_L_RINV_val_2_1_s_dout,
        PAR_L_RINV_val_2_1_loc_empty_n => PAR_L_RINV_val_2_1_s_empty_n,
        PAR_L_RINV_val_2_1_loc_read => Loop_Loop_Row_proc_U0_PAR_L_RINV_val_2_1_loc_read,
        PAR_L_RINV_val_2_2_loc_dout => PAR_L_RINV_val_2_2_s_dout,
        PAR_L_RINV_val_2_2_loc_empty_n => PAR_L_RINV_val_2_2_s_empty_n,
        PAR_L_RINV_val_2_2_loc_read => Loop_Loop_Row_proc_U0_PAR_L_RINV_val_2_2_loc_read,
        PAR_R_RINV_val_0_0_loc_dout => PAR_R_RINV_val_0_0_s_dout,
        PAR_R_RINV_val_0_0_loc_empty_n => PAR_R_RINV_val_0_0_s_empty_n,
        PAR_R_RINV_val_0_0_loc_read => Loop_Loop_Row_proc_U0_PAR_R_RINV_val_0_0_loc_read,
        PAR_R_RINV_val_0_1_loc_dout => PAR_R_RINV_val_0_1_s_dout,
        PAR_R_RINV_val_0_1_loc_empty_n => PAR_R_RINV_val_0_1_s_empty_n,
        PAR_R_RINV_val_0_1_loc_read => Loop_Loop_Row_proc_U0_PAR_R_RINV_val_0_1_loc_read,
        PAR_R_RINV_val_0_2_loc_dout => PAR_R_RINV_val_0_2_s_dout,
        PAR_R_RINV_val_0_2_loc_empty_n => PAR_R_RINV_val_0_2_s_empty_n,
        PAR_R_RINV_val_0_2_loc_read => Loop_Loop_Row_proc_U0_PAR_R_RINV_val_0_2_loc_read,
        PAR_R_RINV_val_1_0_loc_dout => PAR_R_RINV_val_1_0_s_dout,
        PAR_R_RINV_val_1_0_loc_empty_n => PAR_R_RINV_val_1_0_s_empty_n,
        PAR_R_RINV_val_1_0_loc_read => Loop_Loop_Row_proc_U0_PAR_R_RINV_val_1_0_loc_read,
        PAR_R_RINV_val_1_1_loc_dout => PAR_R_RINV_val_1_1_s_dout,
        PAR_R_RINV_val_1_1_loc_empty_n => PAR_R_RINV_val_1_1_s_empty_n,
        PAR_R_RINV_val_1_1_loc_read => Loop_Loop_Row_proc_U0_PAR_R_RINV_val_1_1_loc_read,
        PAR_R_RINV_val_1_2_loc_dout => PAR_R_RINV_val_1_2_s_dout,
        PAR_R_RINV_val_1_2_loc_empty_n => PAR_R_RINV_val_1_2_s_empty_n,
        PAR_R_RINV_val_1_2_loc_read => Loop_Loop_Row_proc_U0_PAR_R_RINV_val_1_2_loc_read,
        PAR_R_RINV_val_2_0_loc_dout => PAR_R_RINV_val_2_0_s_dout,
        PAR_R_RINV_val_2_0_loc_empty_n => PAR_R_RINV_val_2_0_s_empty_n,
        PAR_R_RINV_val_2_0_loc_read => Loop_Loop_Row_proc_U0_PAR_R_RINV_val_2_0_loc_read,
        PAR_R_RINV_val_2_1_loc_dout => PAR_R_RINV_val_2_1_s_dout,
        PAR_R_RINV_val_2_1_loc_empty_n => PAR_R_RINV_val_2_1_s_empty_n,
        PAR_R_RINV_val_2_1_loc_read => Loop_Loop_Row_proc_U0_PAR_R_RINV_val_2_1_loc_read,
        PAR_R_RINV_val_2_2_loc_dout => PAR_R_RINV_val_2_2_s_dout,
        PAR_R_RINV_val_2_2_loc_empty_n => PAR_R_RINV_val_2_2_s_empty_n,
        PAR_R_RINV_val_2_2_loc_read => Loop_Loop_Row_proc_U0_PAR_R_RINV_val_2_2_loc_read,
        leftImage_in_V_address0 => Loop_Loop_Row_proc_U0_leftImage_in_V_address0,
        leftImage_in_V_ce0 => Loop_Loop_Row_proc_U0_leftImage_in_V_ce0,
        leftImage_in_V_q0 => leftImage_in_V_t_q0,
        leftImage_in_V_address1 => Loop_Loop_Row_proc_U0_leftImage_in_V_address1,
        leftImage_in_V_ce1 => Loop_Loop_Row_proc_U0_leftImage_in_V_ce1,
        leftImage_in_V_q1 => leftImage_in_V_t_q1,
        rightImage_in_V_address0 => Loop_Loop_Row_proc_U0_rightImage_in_V_address0,
        rightImage_in_V_ce0 => Loop_Loop_Row_proc_U0_rightImage_in_V_ce0,
        rightImage_in_V_q0 => rightImage_in_V_t_q0,
        rightImage_in_V_address1 => Loop_Loop_Row_proc_U0_rightImage_in_V_address1,
        rightImage_in_V_ce1 => Loop_Loop_Row_proc_U0_rightImage_in_V_ce1,
        rightImage_in_V_q1 => rightImage_in_V_t_q1);

    Loop_4_proc_U0 : component Loop_4_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_4_proc_U0_ap_start,
        ap_done => Loop_4_proc_U0_ap_done,
        ap_continue => Loop_4_proc_U0_ap_continue,
        ap_idle => Loop_4_proc_U0_ap_idle,
        ap_ready => Loop_4_proc_U0_ap_ready,
        packets_loc_dout => packets_loc_c_dout,
        packets_loc_empty_n => packets_loc_c_empty_n,
        packets_loc_read => Loop_4_proc_U0_packets_loc_read,
        cols_V => cols_V,
        rows_V => rows_V,
        dMapout_TDATA => Loop_4_proc_U0_dMapout_TDATA,
        dMapout_TVALID => Loop_4_proc_U0_dMapout_TVALID,
        dMapout_TREADY => dMapout_TREADY,
        dMap_data_stream_0_V_dout => dMap_data_stream_0_s_dout,
        dMap_data_stream_0_V_empty_n => dMap_data_stream_0_s_empty_n,
        dMap_data_stream_0_V_read => Loop_4_proc_U0_dMap_data_stream_0_V_read,
        dMapout_TUSER => Loop_4_proc_U0_dMapout_TUSER,
        dMapout_TLAST => Loop_4_proc_U0_dMapout_TLAST);

    packets_loc_c_U : component fifo_w32_d4_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_arrayctor_loop_U0_packets_out_out_din,
        if_full_n => packets_loc_c_full_n,
        if_write => Block_arrayctor_loop_U0_packets_out_out_write,
        if_dout => packets_loc_c_dout,
        if_empty_n => packets_loc_c_empty_n,
        if_read => Loop_4_proc_U0_packets_loc_read);

    col_packets_loc_chan_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_arrayctor_loop_U0_ap_return_0,
        if_full_n => col_packets_loc_chan_full_n,
        if_write => ap_channel_done_col_packets_loc_chan,
        if_dout => col_packets_loc_chan_dout,
        if_empty_n => col_packets_loc_chan_empty_n,
        if_read => Loop_disparityMap_la_U0_ap_ready);

    tmp_cast_loc_channel_U : component fifo_w63_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_arrayctor_loop_U0_ap_return_1,
        if_full_n => tmp_cast_loc_channel_full_n,
        if_write => ap_channel_done_tmp_cast_loc_channel,
        if_dout => tmp_cast_loc_channel_dout,
        if_empty_n => tmp_cast_loc_channel_empty_n,
        if_read => Loop_disparityMap_la_U0_ap_ready);

    PAR_R_RINV_val_2_2_s_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_2_proc_U0_PAR_R_RINV_val_2_2_out_out_din,
        if_full_n => PAR_R_RINV_val_2_2_s_full_n,
        if_write => Loop_2_proc_U0_PAR_R_RINV_val_2_2_out_out_write,
        if_dout => PAR_R_RINV_val_2_2_s_dout,
        if_empty_n => PAR_R_RINV_val_2_2_s_empty_n,
        if_read => Loop_Loop_Row_proc_U0_PAR_R_RINV_val_2_2_loc_read);

    PAR_R_RINV_val_2_1_s_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_2_proc_U0_PAR_R_RINV_val_2_1_out_out_din,
        if_full_n => PAR_R_RINV_val_2_1_s_full_n,
        if_write => Loop_2_proc_U0_PAR_R_RINV_val_2_1_out_out_write,
        if_dout => PAR_R_RINV_val_2_1_s_dout,
        if_empty_n => PAR_R_RINV_val_2_1_s_empty_n,
        if_read => Loop_Loop_Row_proc_U0_PAR_R_RINV_val_2_1_loc_read);

    PAR_R_RINV_val_2_0_s_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_2_proc_U0_PAR_R_RINV_val_2_0_out_out_din,
        if_full_n => PAR_R_RINV_val_2_0_s_full_n,
        if_write => Loop_2_proc_U0_PAR_R_RINV_val_2_0_out_out_write,
        if_dout => PAR_R_RINV_val_2_0_s_dout,
        if_empty_n => PAR_R_RINV_val_2_0_s_empty_n,
        if_read => Loop_Loop_Row_proc_U0_PAR_R_RINV_val_2_0_loc_read);

    PAR_R_RINV_val_1_2_s_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_2_proc_U0_PAR_R_RINV_val_1_2_out_out_din,
        if_full_n => PAR_R_RINV_val_1_2_s_full_n,
        if_write => Loop_2_proc_U0_PAR_R_RINV_val_1_2_out_out_write,
        if_dout => PAR_R_RINV_val_1_2_s_dout,
        if_empty_n => PAR_R_RINV_val_1_2_s_empty_n,
        if_read => Loop_Loop_Row_proc_U0_PAR_R_RINV_val_1_2_loc_read);

    PAR_R_RINV_val_1_1_s_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_2_proc_U0_PAR_R_RINV_val_1_1_out_out_din,
        if_full_n => PAR_R_RINV_val_1_1_s_full_n,
        if_write => Loop_2_proc_U0_PAR_R_RINV_val_1_1_out_out_write,
        if_dout => PAR_R_RINV_val_1_1_s_dout,
        if_empty_n => PAR_R_RINV_val_1_1_s_empty_n,
        if_read => Loop_Loop_Row_proc_U0_PAR_R_RINV_val_1_1_loc_read);

    PAR_R_RINV_val_1_0_s_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_2_proc_U0_PAR_R_RINV_val_1_0_out_out_din,
        if_full_n => PAR_R_RINV_val_1_0_s_full_n,
        if_write => Loop_2_proc_U0_PAR_R_RINV_val_1_0_out_out_write,
        if_dout => PAR_R_RINV_val_1_0_s_dout,
        if_empty_n => PAR_R_RINV_val_1_0_s_empty_n,
        if_read => Loop_Loop_Row_proc_U0_PAR_R_RINV_val_1_0_loc_read);

    PAR_R_RINV_val_0_2_s_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_2_proc_U0_PAR_R_RINV_val_0_2_out_out_din,
        if_full_n => PAR_R_RINV_val_0_2_s_full_n,
        if_write => Loop_2_proc_U0_PAR_R_RINV_val_0_2_out_out_write,
        if_dout => PAR_R_RINV_val_0_2_s_dout,
        if_empty_n => PAR_R_RINV_val_0_2_s_empty_n,
        if_read => Loop_Loop_Row_proc_U0_PAR_R_RINV_val_0_2_loc_read);

    PAR_R_RINV_val_0_1_s_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_2_proc_U0_PAR_R_RINV_val_0_1_out_out_din,
        if_full_n => PAR_R_RINV_val_0_1_s_full_n,
        if_write => Loop_2_proc_U0_PAR_R_RINV_val_0_1_out_out_write,
        if_dout => PAR_R_RINV_val_0_1_s_dout,
        if_empty_n => PAR_R_RINV_val_0_1_s_empty_n,
        if_read => Loop_Loop_Row_proc_U0_PAR_R_RINV_val_0_1_loc_read);

    PAR_R_RINV_val_0_0_s_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_2_proc_U0_PAR_R_RINV_val_0_0_out_out_din,
        if_full_n => PAR_R_RINV_val_0_0_s_full_n,
        if_write => Loop_2_proc_U0_PAR_R_RINV_val_0_0_out_out_write,
        if_dout => PAR_R_RINV_val_0_0_s_dout,
        if_empty_n => PAR_R_RINV_val_0_0_s_empty_n,
        if_read => Loop_Loop_Row_proc_U0_PAR_R_RINV_val_0_0_loc_read);

    PAR_L_RINV_val_2_2_s_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_2_proc_U0_PAR_L_RINV_val_2_2_out_out_din,
        if_full_n => PAR_L_RINV_val_2_2_s_full_n,
        if_write => Loop_2_proc_U0_PAR_L_RINV_val_2_2_out_out_write,
        if_dout => PAR_L_RINV_val_2_2_s_dout,
        if_empty_n => PAR_L_RINV_val_2_2_s_empty_n,
        if_read => Loop_Loop_Row_proc_U0_PAR_L_RINV_val_2_2_loc_read);

    PAR_L_RINV_val_2_1_s_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_2_proc_U0_PAR_L_RINV_val_2_1_out_out_din,
        if_full_n => PAR_L_RINV_val_2_1_s_full_n,
        if_write => Loop_2_proc_U0_PAR_L_RINV_val_2_1_out_out_write,
        if_dout => PAR_L_RINV_val_2_1_s_dout,
        if_empty_n => PAR_L_RINV_val_2_1_s_empty_n,
        if_read => Loop_Loop_Row_proc_U0_PAR_L_RINV_val_2_1_loc_read);

    PAR_L_RINV_val_2_0_s_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_2_proc_U0_PAR_L_RINV_val_2_0_out_out_din,
        if_full_n => PAR_L_RINV_val_2_0_s_full_n,
        if_write => Loop_2_proc_U0_PAR_L_RINV_val_2_0_out_out_write,
        if_dout => PAR_L_RINV_val_2_0_s_dout,
        if_empty_n => PAR_L_RINV_val_2_0_s_empty_n,
        if_read => Loop_Loop_Row_proc_U0_PAR_L_RINV_val_2_0_loc_read);

    PAR_L_RINV_val_1_2_s_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_2_proc_U0_PAR_L_RINV_val_1_2_out_out_din,
        if_full_n => PAR_L_RINV_val_1_2_s_full_n,
        if_write => Loop_2_proc_U0_PAR_L_RINV_val_1_2_out_out_write,
        if_dout => PAR_L_RINV_val_1_2_s_dout,
        if_empty_n => PAR_L_RINV_val_1_2_s_empty_n,
        if_read => Loop_Loop_Row_proc_U0_PAR_L_RINV_val_1_2_loc_read);

    PAR_L_RINV_val_1_1_s_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_2_proc_U0_PAR_L_RINV_val_1_1_out_out_din,
        if_full_n => PAR_L_RINV_val_1_1_s_full_n,
        if_write => Loop_2_proc_U0_PAR_L_RINV_val_1_1_out_out_write,
        if_dout => PAR_L_RINV_val_1_1_s_dout,
        if_empty_n => PAR_L_RINV_val_1_1_s_empty_n,
        if_read => Loop_Loop_Row_proc_U0_PAR_L_RINV_val_1_1_loc_read);

    PAR_L_RINV_val_1_0_s_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_2_proc_U0_PAR_L_RINV_val_1_0_out_out_din,
        if_full_n => PAR_L_RINV_val_1_0_s_full_n,
        if_write => Loop_2_proc_U0_PAR_L_RINV_val_1_0_out_out_write,
        if_dout => PAR_L_RINV_val_1_0_s_dout,
        if_empty_n => PAR_L_RINV_val_1_0_s_empty_n,
        if_read => Loop_Loop_Row_proc_U0_PAR_L_RINV_val_1_0_loc_read);

    PAR_L_RINV_val_0_2_s_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_2_proc_U0_PAR_L_RINV_val_0_2_out_out_din,
        if_full_n => PAR_L_RINV_val_0_2_s_full_n,
        if_write => Loop_2_proc_U0_PAR_L_RINV_val_0_2_out_out_write,
        if_dout => PAR_L_RINV_val_0_2_s_dout,
        if_empty_n => PAR_L_RINV_val_0_2_s_empty_n,
        if_read => Loop_Loop_Row_proc_U0_PAR_L_RINV_val_0_2_loc_read);

    PAR_L_RINV_val_0_1_s_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_2_proc_U0_PAR_L_RINV_val_0_1_out_out_din,
        if_full_n => PAR_L_RINV_val_0_1_s_full_n,
        if_write => Loop_2_proc_U0_PAR_L_RINV_val_0_1_out_out_write,
        if_dout => PAR_L_RINV_val_0_1_s_dout,
        if_empty_n => PAR_L_RINV_val_0_1_s_empty_n,
        if_read => Loop_Loop_Row_proc_U0_PAR_L_RINV_val_0_1_loc_read);

    PAR_L_RINV_val_0_0_s_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_2_proc_U0_PAR_L_RINV_val_0_0_out_out_din,
        if_full_n => PAR_L_RINV_val_0_0_s_full_n,
        if_write => Loop_2_proc_U0_PAR_L_RINV_val_0_0_out_out_write,
        if_dout => PAR_L_RINV_val_0_0_s_dout,
        if_empty_n => PAR_L_RINV_val_0_0_s_empty_n,
        if_read => Loop_Loop_Row_proc_U0_PAR_L_RINV_val_0_0_loc_read);

    cy2_loc_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_2_proc_U0_cy2_out_out_din,
        if_full_n => cy2_loc_c_full_n,
        if_write => Loop_2_proc_U0_cy2_out_out_write,
        if_dout => cy2_loc_c_dout,
        if_empty_n => cy2_loc_c_empty_n,
        if_read => Loop_Loop_Row_proc_U0_cy2_loc_read);

    fy2_loc_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_2_proc_U0_fy2_out_out_din,
        if_full_n => fy2_loc_c_full_n,
        if_write => Loop_2_proc_U0_fy2_out_out_write,
        if_dout => fy2_loc_c_dout,
        if_empty_n => fy2_loc_c_empty_n,
        if_read => Loop_Loop_Row_proc_U0_fy2_loc_read);

    cx2_loc_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_2_proc_U0_cx2_out_out_din,
        if_full_n => cx2_loc_c_full_n,
        if_write => Loop_2_proc_U0_cx2_out_out_write,
        if_dout => cx2_loc_c_dout,
        if_empty_n => cx2_loc_c_empty_n,
        if_read => Loop_Loop_Row_proc_U0_cx2_loc_read);

    fx2_loc_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_2_proc_U0_fx2_out_out_din,
        if_full_n => fx2_loc_c_full_n,
        if_write => Loop_2_proc_U0_fx2_out_out_write,
        if_dout => fx2_loc_c_dout,
        if_empty_n => fx2_loc_c_empty_n,
        if_read => Loop_Loop_Row_proc_U0_fx2_loc_read);

    cy1_loc_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_2_proc_U0_cy1_out_out_din,
        if_full_n => cy1_loc_c_full_n,
        if_write => Loop_2_proc_U0_cy1_out_out_write,
        if_dout => cy1_loc_c_dout,
        if_empty_n => cy1_loc_c_empty_n,
        if_read => Loop_Loop_Row_proc_U0_cy1_loc_read);

    fy1_loc_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_2_proc_U0_fy1_out_out_din,
        if_full_n => fy1_loc_c_full_n,
        if_write => Loop_2_proc_U0_fy1_out_out_write,
        if_dout => fy1_loc_c_dout,
        if_empty_n => fy1_loc_c_empty_n,
        if_read => Loop_Loop_Row_proc_U0_fy1_loc_read);

    cx1_loc_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_2_proc_U0_cx1_out_out_din,
        if_full_n => cx1_loc_c_full_n,
        if_write => Loop_2_proc_U0_cx1_out_out_write,
        if_dout => cx1_loc_c_dout,
        if_empty_n => cx1_loc_c_empty_n,
        if_read => Loop_Loop_Row_proc_U0_cx1_loc_read);

    fx1_loc_c_U : component fifo_w32_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_2_proc_U0_fx1_out_out_din,
        if_full_n => fx1_loc_c_full_n,
        if_write => Loop_2_proc_U0_fx1_out_out_write,
        if_dout => fx1_loc_c_dout,
        if_empty_n => fx1_loc_c_empty_n,
        if_read => Loop_Loop_Row_proc_U0_fx1_loc_read);

    dMap_data_stream_0_s_U : component fifo_w8_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_Loop_Row_proc_U0_dMap_data_stream_0_V_din,
        if_full_n => dMap_data_stream_0_s_full_n,
        if_write => Loop_Loop_Row_proc_U0_dMap_data_stream_0_V_write,
        if_dout => dMap_data_stream_0_s_dout,
        if_empty_n => dMap_data_stream_0_s_empty_n,
        if_read => Loop_4_proc_U0_dMap_data_stream_0_V_read);

    start_for_Loop_4_Mgi_U : component start_for_Loop_4_Mgi
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_Loop_4_proc_U0_din,
        if_full_n => start_for_Loop_4_proc_U0_full_n,
        if_write => Block_arrayctor_loop_U0_start_write,
        if_dout => start_for_Loop_4_proc_U0_dout,
        if_empty_n => start_for_Loop_4_proc_U0_empty_n,
        if_read => Loop_4_proc_U0_ap_ready);





    ap_sync_reg_Block_arrayctor_loop_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Block_arrayctor_loop_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Block_arrayctor_loop_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Block_arrayctor_loop_U0_ap_ready <= ap_sync_Block_arrayctor_loop_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_Loop_2_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Loop_2_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Loop_2_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Loop_2_proc_U0_ap_ready <= ap_sync_Loop_2_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_Loop_disparityMap_la_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_Loop_disparityMap_la_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_Loop_disparityMap_la_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_Loop_disparityMap_la_U0_ap_ready <= ap_sync_Loop_disparityMap_la_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_col_packets_loc_chan_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_col_packets_loc_chan <= ap_const_logic_0;
            else
                if (((Block_arrayctor_loop_U0_ap_done and Block_arrayctor_loop_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_col_packets_loc_chan <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_col_packets_loc_chan <= ap_sync_channel_write_col_packets_loc_chan;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_leftImage_in_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_leftImage_in_V <= ap_const_logic_0;
            else
                if (((Loop_disparityMap_la_U0_ap_done and Loop_disparityMap_la_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_leftImage_in_V <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_leftImage_in_V <= ap_sync_channel_write_leftImage_in_V;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_rightImage_in_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_rightImage_in_V <= ap_const_logic_0;
            else
                if (((Loop_disparityMap_la_U0_ap_done and Loop_disparityMap_la_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_rightImage_in_V <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_rightImage_in_V <= ap_sync_channel_write_rightImage_in_V;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_tmp_cast_loc_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_tmp_cast_loc_channel <= ap_const_logic_0;
            else
                if (((Block_arrayctor_loop_U0_ap_done and Block_arrayctor_loop_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_tmp_cast_loc_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_tmp_cast_loc_channel <= ap_sync_channel_write_tmp_cast_loc_channel;
                end if; 
            end if;
        end if;
    end process;


    Block_arrayctor_loop_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (ap_const_logic_0 = Block_arrayctor_loop_U0_ap_ready))) then 
                Block_arrayctor_loop_U0_ap_ready_count <= std_logic_vector(unsigned(Block_arrayctor_loop_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = Block_arrayctor_loop_U0_ap_ready) and (ap_sync_ready = ap_const_logic_0))) then 
                Block_arrayctor_loop_U0_ap_ready_count <= std_logic_vector(unsigned(Block_arrayctor_loop_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    Loop_2_proc_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (ap_const_logic_0 = Loop_2_proc_U0_ap_ready))) then 
                Loop_2_proc_U0_ap_ready_count <= std_logic_vector(unsigned(Loop_2_proc_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = Loop_2_proc_U0_ap_ready) and (ap_sync_ready = ap_const_logic_0))) then 
                Loop_2_proc_U0_ap_ready_count <= std_logic_vector(unsigned(Loop_2_proc_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;

    Loop_disparityMap_la_U0_ap_ready_count_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_sync_ready = ap_const_logic_1) and (ap_const_logic_0 = Loop_disparityMap_la_U0_ap_ready))) then 
                Loop_disparityMap_la_U0_ap_ready_count <= std_logic_vector(unsigned(Loop_disparityMap_la_U0_ap_ready_count) - unsigned(ap_const_lv2_1));
            elsif (((ap_const_logic_1 = Loop_disparityMap_la_U0_ap_ready) and (ap_sync_ready = ap_const_logic_0))) then 
                Loop_disparityMap_la_U0_ap_ready_count <= std_logic_vector(unsigned(Loop_disparityMap_la_U0_ap_ready_count) + unsigned(ap_const_lv2_1));
            end if; 
        end if;
    end process;
    Block_arrayctor_loop_U0_ap_continue <= (ap_sync_channel_write_tmp_cast_loc_channel and ap_sync_channel_write_col_packets_loc_chan);
    Block_arrayctor_loop_U0_ap_start <= ((ap_sync_reg_Block_arrayctor_loop_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Loop_2_proc_U0_ap_continue <= ap_const_logic_1;
    Loop_2_proc_U0_ap_start <= ((ap_sync_reg_Loop_2_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    Loop_2_proc_U0_start_full_n <= ap_const_logic_1;
    Loop_2_proc_U0_start_write <= ap_const_logic_0;
    Loop_4_proc_U0_ap_continue <= ap_const_logic_1;
    Loop_4_proc_U0_ap_start <= start_for_Loop_4_proc_U0_empty_n;
    Loop_4_proc_U0_start_full_n <= ap_const_logic_1;
    Loop_4_proc_U0_start_write <= ap_const_logic_0;
    Loop_Loop_Row_proc_U0_ap_continue <= ap_const_logic_1;
    Loop_Loop_Row_proc_U0_ap_start <= (rightImage_in_V_t_empty_n and leftImage_in_V_t_empty_n);
    Loop_Loop_Row_proc_U0_start_full_n <= ap_const_logic_1;
    Loop_Loop_Row_proc_U0_start_write <= ap_const_logic_0;
    Loop_disparityMap_la_U0_ap_continue <= (ap_sync_channel_write_rightImage_in_V and ap_sync_channel_write_leftImage_in_V);
    Loop_disparityMap_la_U0_ap_start <= (tmp_cast_loc_channel_empty_n and (ap_sync_reg_Loop_disparityMap_la_U0_ap_ready xor ap_const_logic_1) and col_packets_loc_chan_empty_n and ap_start);
    Loop_disparityMap_la_U0_leftImage_in_V_full_n <= leftImage_in_V_i_full_n;
    Loop_disparityMap_la_U0_rightImage_in_V_full_n <= rightImage_in_V_i_full_n;
    Loop_disparityMap_la_U0_start_full_n <= ap_const_logic_1;
    Loop_disparityMap_la_U0_start_write <= ap_const_logic_0;
    ap_channel_done_col_packets_loc_chan <= ((ap_sync_reg_channel_write_col_packets_loc_chan xor ap_const_logic_1) and Block_arrayctor_loop_U0_ap_done);
    ap_channel_done_leftImage_in_V <= ((ap_sync_reg_channel_write_leftImage_in_V xor ap_const_logic_1) and Loop_disparityMap_la_U0_ap_done);
    ap_channel_done_rightImage_in_V <= ((ap_sync_reg_channel_write_rightImage_in_V xor ap_const_logic_1) and Loop_disparityMap_la_U0_ap_done);
    ap_channel_done_tmp_cast_loc_channel <= ((ap_sync_reg_channel_write_tmp_cast_loc_channel xor ap_const_logic_1) and Block_arrayctor_loop_U0_ap_done);
    ap_done <= Loop_4_proc_U0_ap_done;
    ap_idle <= ((tmp_cast_loc_channel_empty_n xor ap_const_logic_1) and (col_packets_loc_chan_empty_n xor ap_const_logic_1) and (rightImage_in_V_t_empty_n xor ap_const_logic_1) and (leftImage_in_V_t_empty_n xor ap_const_logic_1) and Loop_disparityMap_la_U0_ap_idle and Loop_Loop_Row_proc_U0_ap_idle and Loop_4_proc_U0_ap_idle and Loop_2_proc_U0_ap_idle and Block_arrayctor_loop_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_AXI_LITE_clk_inv_assign_proc : process(ap_rst_n_AXI_LITE_clk)
    begin
                ap_rst_n_AXI_LITE_clk_inv <= not(ap_rst_n_AXI_LITE_clk);
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_Block_arrayctor_loop_U0_ap_ready <= (ap_sync_reg_Block_arrayctor_loop_U0_ap_ready or Block_arrayctor_loop_U0_ap_ready);
    ap_sync_Loop_2_proc_U0_ap_ready <= (ap_sync_reg_Loop_2_proc_U0_ap_ready or Loop_2_proc_U0_ap_ready);
    ap_sync_Loop_disparityMap_la_U0_ap_ready <= (ap_sync_reg_Loop_disparityMap_la_U0_ap_ready or Loop_disparityMap_la_U0_ap_ready);
    ap_sync_channel_write_col_packets_loc_chan <= ((col_packets_loc_chan_full_n and ap_channel_done_col_packets_loc_chan) or ap_sync_reg_channel_write_col_packets_loc_chan);
    ap_sync_channel_write_leftImage_in_V <= ((ap_channel_done_leftImage_in_V and Loop_disparityMap_la_U0_leftImage_in_V_full_n) or ap_sync_reg_channel_write_leftImage_in_V);
    ap_sync_channel_write_rightImage_in_V <= ((ap_channel_done_rightImage_in_V and Loop_disparityMap_la_U0_rightImage_in_V_full_n) or ap_sync_reg_channel_write_rightImage_in_V);
    ap_sync_channel_write_tmp_cast_loc_channel <= ((tmp_cast_loc_channel_full_n and ap_channel_done_tmp_cast_loc_channel) or ap_sync_reg_channel_write_tmp_cast_loc_channel);
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= Loop_4_proc_U0_ap_done;
    ap_sync_ready <= (ap_sync_Loop_disparityMap_la_U0_ap_ready and ap_sync_Loop_2_proc_U0_ap_ready and ap_sync_Block_arrayctor_loop_U0_ap_ready);
    dMapout_TDATA <= Loop_4_proc_U0_dMapout_TDATA;
    dMapout_TLAST <= Loop_4_proc_U0_dMapout_TLAST;
    dMapout_TUSER <= Loop_4_proc_U0_dMapout_TUSER;
    dMapout_TVALID <= Loop_4_proc_U0_dMapout_TVALID;
    in_stream_TREADY <= Loop_disparityMap_la_U0_in_stream_TREADY;
    start_for_Loop_4_proc_U0_din <= (0=>ap_const_logic_1, others=>'-');
end behav;
