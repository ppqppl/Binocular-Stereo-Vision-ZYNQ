-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.3
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Loop_4_proc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    packets_loc_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    packets_loc_empty_n : IN STD_LOGIC;
    packets_loc_read : OUT STD_LOGIC;
    cols_V : IN STD_LOGIC_VECTOR (31 downto 0);
    rows_V : IN STD_LOGIC_VECTOR (31 downto 0);
    dMapout_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    dMapout_TVALID : OUT STD_LOGIC;
    dMapout_TREADY : IN STD_LOGIC;
    dMap_data_stream_0_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    dMap_data_stream_0_V_empty_n : IN STD_LOGIC;
    dMap_data_stream_0_V_read : OUT STD_LOGIC;
    dMapout_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    dMapout_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of Loop_4_proc is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv62_0 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_FFFFFFFF : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111111";
    constant ap_const_lv62_1 : STD_LOGIC_VECTOR (61 downto 0) := "00000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv31_1 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dMapout_data_V_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal dMapout_data_V_1_vld_in : STD_LOGIC;
    signal dMapout_data_V_1_vld_out : STD_LOGIC;
    signal dMapout_data_V_1_ack_in : STD_LOGIC;
    signal dMapout_data_V_1_ack_out : STD_LOGIC;
    signal dMapout_data_V_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal dMapout_data_V_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal dMapout_data_V_1_sel_rd : STD_LOGIC := '0';
    signal dMapout_data_V_1_sel_wr : STD_LOGIC := '0';
    signal dMapout_data_V_1_sel : STD_LOGIC;
    signal dMapout_data_V_1_load_A : STD_LOGIC;
    signal dMapout_data_V_1_load_B : STD_LOGIC;
    signal dMapout_data_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal dMapout_data_V_1_state_cmp_full : STD_LOGIC;
    signal dMapout_user_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal dMapout_user_V_1_vld_in : STD_LOGIC;
    signal dMapout_user_V_1_vld_out : STD_LOGIC;
    signal dMapout_user_V_1_ack_in : STD_LOGIC;
    signal dMapout_user_V_1_ack_out : STD_LOGIC;
    signal dMapout_user_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal dMapout_user_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal dMapout_user_V_1_sel_rd : STD_LOGIC := '0';
    signal dMapout_user_V_1_sel_wr : STD_LOGIC := '0';
    signal dMapout_user_V_1_sel : STD_LOGIC;
    signal dMapout_user_V_1_load_A : STD_LOGIC;
    signal dMapout_user_V_1_load_B : STD_LOGIC;
    signal dMapout_user_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal dMapout_user_V_1_state_cmp_full : STD_LOGIC;
    signal dMapout_last_V_1_data_out : STD_LOGIC_VECTOR (0 downto 0);
    signal dMapout_last_V_1_vld_in : STD_LOGIC;
    signal dMapout_last_V_1_vld_out : STD_LOGIC;
    signal dMapout_last_V_1_ack_in : STD_LOGIC;
    signal dMapout_last_V_1_ack_out : STD_LOGIC;
    signal dMapout_last_V_1_payload_A : STD_LOGIC_VECTOR (0 downto 0);
    signal dMapout_last_V_1_payload_B : STD_LOGIC_VECTOR (0 downto 0);
    signal dMapout_last_V_1_sel_rd : STD_LOGIC := '0';
    signal dMapout_last_V_1_sel_wr : STD_LOGIC := '0';
    signal dMapout_last_V_1_sel : STD_LOGIC;
    signal dMapout_last_V_1_load_A : STD_LOGIC;
    signal dMapout_last_V_1_load_B : STD_LOGIC;
    signal dMapout_last_V_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal dMapout_last_V_1_state_cmp_full : STD_LOGIC;
    signal packets_loc_blk_n : STD_LOGIC;
    signal dMapout_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal exitcond_flatten_reg_372 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal exitcond_flatten_reg_372_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal dMap_data_stream_0_V_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal indvar_flatten_reg_137 : STD_LOGIC_VECTOR (61 downto 0);
    signal i_op_assign_reg_148 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_1_rec_i_i_reg_159 : STD_LOGIC_VECTOR (30 downto 0);
    signal packets_loc_read_reg_349 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal tmp_26_i_i_fu_223_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_i_i_reg_356 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_14_cast_i_i_fu_239_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal bound_fu_251_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal exitcond_flatten_fu_257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state7_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal indvar_flatten_next_fu_262_p2 : STD_LOGIC_VECTOR (61 downto 0);
    signal indvar_flatten_next_reg_376 : STD_LOGIC_VECTOR (61 downto 0);
    signal dMapout_user_V_tmp_fu_291_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal dMapout_user_V_tmp_reg_381 : STD_LOGIC_VECTOR (0 downto 0);
    signal dMapout_last_V_tmp_fu_309_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal dMapout_last_V_tmp_reg_386 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_op_assign_mid2_fu_317_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_op_assign_mid2_reg_391 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_rec_i_i_fu_331_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_rec_i_i_reg_396 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_151_reg_401 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state4_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_state8_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_state8_io : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_152_reg_406 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state5_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal tmp_153_reg_411 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_state6_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal p_Result_s_fu_339_p5 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_phi_mux_indvar_flatten_phi_fu_141_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_phi_mux_i_op_assign_phi_fu_152_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_p_1_rec_i_i_phi_fu_163_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal p_neg_i_i_fu_177_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_i_i_fu_182_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_s_fu_192_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_lshr_f_i_i_fu_202_p4 : STD_LOGIC_VECTOR (30 downto 0);
    signal tmp_fu_170_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_t_i_i_fu_196_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_67_fu_211_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_i_i_fu_215_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_68_fu_229_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal bound_fu_251_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal bound_fu_251_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_fu_268_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond3_i_i7_fu_286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_i_i_mid1_fu_274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_i_i3_fu_280_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_i_i_mid1_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_i_i2_fu_304_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_1_rec_i_i_op_fu_325_p2 : STD_LOGIC_VECTOR (30 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_block_state9 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound_fu_251_p00 : STD_LOGIC_VECTOR (61 downto 0);
    signal bound_fu_251_p10 : STD_LOGIC_VECTOR (61 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((dMapout_data_V_1_ack_in = ap_const_logic_0) or (dMapout_last_V_1_ack_in = ap_const_logic_0) or (dMapout_user_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    dMapout_data_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                dMapout_data_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((dMapout_data_V_1_ack_out = ap_const_logic_1) and (dMapout_data_V_1_vld_out = ap_const_logic_1))) then 
                                        dMapout_data_V_1_sel_rd <= not(dMapout_data_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    dMapout_data_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                dMapout_data_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((dMapout_data_V_1_ack_in = ap_const_logic_1) and (dMapout_data_V_1_vld_in = ap_const_logic_1))) then 
                                        dMapout_data_V_1_sel_wr <= not(dMapout_data_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    dMapout_data_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                dMapout_data_V_1_state <= ap_const_lv2_0;
            else
                if ((((dMapout_data_V_1_state = ap_const_lv2_2) and (dMapout_data_V_1_vld_in = ap_const_logic_0)) or ((dMapout_data_V_1_state = ap_const_lv2_3) and (dMapout_data_V_1_vld_in = ap_const_logic_0) and (dMapout_data_V_1_ack_out = ap_const_logic_1)))) then 
                    dMapout_data_V_1_state <= ap_const_lv2_2;
                elsif ((((dMapout_data_V_1_state = ap_const_lv2_1) and (dMapout_data_V_1_ack_out = ap_const_logic_0)) or ((dMapout_data_V_1_state = ap_const_lv2_3) and (dMapout_data_V_1_ack_out = ap_const_logic_0) and (dMapout_data_V_1_vld_in = ap_const_logic_1)))) then 
                    dMapout_data_V_1_state <= ap_const_lv2_1;
                elsif (((not(((dMapout_data_V_1_vld_in = ap_const_logic_0) and (dMapout_data_V_1_ack_out = ap_const_logic_1))) and not(((dMapout_data_V_1_ack_out = ap_const_logic_0) and (dMapout_data_V_1_vld_in = ap_const_logic_1))) and (dMapout_data_V_1_state = ap_const_lv2_3)) or ((dMapout_data_V_1_state = ap_const_lv2_1) and (dMapout_data_V_1_ack_out = ap_const_logic_1)) or ((dMapout_data_V_1_state = ap_const_lv2_2) and (dMapout_data_V_1_vld_in = ap_const_logic_1)))) then 
                    dMapout_data_V_1_state <= ap_const_lv2_3;
                else 
                    dMapout_data_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    dMapout_last_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                dMapout_last_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((dMapout_last_V_1_ack_out = ap_const_logic_1) and (dMapout_last_V_1_vld_out = ap_const_logic_1))) then 
                                        dMapout_last_V_1_sel_rd <= not(dMapout_last_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    dMapout_last_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                dMapout_last_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((dMapout_last_V_1_ack_in = ap_const_logic_1) and (dMapout_last_V_1_vld_in = ap_const_logic_1))) then 
                                        dMapout_last_V_1_sel_wr <= not(dMapout_last_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    dMapout_last_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                dMapout_last_V_1_state <= ap_const_lv2_0;
            else
                if ((((dMapout_last_V_1_state = ap_const_lv2_2) and (dMapout_last_V_1_vld_in = ap_const_logic_0)) or ((dMapout_last_V_1_state = ap_const_lv2_3) and (dMapout_last_V_1_vld_in = ap_const_logic_0) and (dMapout_last_V_1_ack_out = ap_const_logic_1)))) then 
                    dMapout_last_V_1_state <= ap_const_lv2_2;
                elsif ((((dMapout_last_V_1_state = ap_const_lv2_1) and (dMapout_last_V_1_ack_out = ap_const_logic_0)) or ((dMapout_last_V_1_state = ap_const_lv2_3) and (dMapout_last_V_1_ack_out = ap_const_logic_0) and (dMapout_last_V_1_vld_in = ap_const_logic_1)))) then 
                    dMapout_last_V_1_state <= ap_const_lv2_1;
                elsif (((not(((dMapout_last_V_1_vld_in = ap_const_logic_0) and (dMapout_last_V_1_ack_out = ap_const_logic_1))) and not(((dMapout_last_V_1_ack_out = ap_const_logic_0) and (dMapout_last_V_1_vld_in = ap_const_logic_1))) and (dMapout_last_V_1_state = ap_const_lv2_3)) or ((dMapout_last_V_1_state = ap_const_lv2_1) and (dMapout_last_V_1_ack_out = ap_const_logic_1)) or ((dMapout_last_V_1_state = ap_const_lv2_2) and (dMapout_last_V_1_vld_in = ap_const_logic_1)))) then 
                    dMapout_last_V_1_state <= ap_const_lv2_3;
                else 
                    dMapout_last_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    dMapout_user_V_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                dMapout_user_V_1_sel_rd <= ap_const_logic_0;
            else
                if (((dMapout_user_V_1_ack_out = ap_const_logic_1) and (dMapout_user_V_1_vld_out = ap_const_logic_1))) then 
                                        dMapout_user_V_1_sel_rd <= not(dMapout_user_V_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    dMapout_user_V_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                dMapout_user_V_1_sel_wr <= ap_const_logic_0;
            else
                if (((dMapout_user_V_1_ack_in = ap_const_logic_1) and (dMapout_user_V_1_vld_in = ap_const_logic_1))) then 
                                        dMapout_user_V_1_sel_wr <= not(dMapout_user_V_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    dMapout_user_V_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                dMapout_user_V_1_state <= ap_const_lv2_0;
            else
                if ((((dMapout_user_V_1_state = ap_const_lv2_2) and (dMapout_user_V_1_vld_in = ap_const_logic_0)) or ((dMapout_user_V_1_state = ap_const_lv2_3) and (dMapout_user_V_1_vld_in = ap_const_logic_0) and (dMapout_user_V_1_ack_out = ap_const_logic_1)))) then 
                    dMapout_user_V_1_state <= ap_const_lv2_2;
                elsif ((((dMapout_user_V_1_state = ap_const_lv2_1) and (dMapout_user_V_1_ack_out = ap_const_logic_0)) or ((dMapout_user_V_1_state = ap_const_lv2_3) and (dMapout_user_V_1_ack_out = ap_const_logic_0) and (dMapout_user_V_1_vld_in = ap_const_logic_1)))) then 
                    dMapout_user_V_1_state <= ap_const_lv2_1;
                elsif (((not(((dMapout_user_V_1_vld_in = ap_const_logic_0) and (dMapout_user_V_1_ack_out = ap_const_logic_1))) and not(((dMapout_user_V_1_ack_out = ap_const_logic_0) and (dMapout_user_V_1_vld_in = ap_const_logic_1))) and (dMapout_user_V_1_state = ap_const_lv2_3)) or ((dMapout_user_V_1_state = ap_const_lv2_1) and (dMapout_user_V_1_ack_out = ap_const_logic_1)) or ((dMapout_user_V_1_state = ap_const_lv2_2) and (dMapout_user_V_1_vld_in = ap_const_logic_1)))) then 
                    dMapout_user_V_1_state <= ap_const_lv2_3;
                else 
                    dMapout_user_V_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i_op_assign_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_372 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_op_assign_reg_148 <= i_op_assign_mid2_reg_391;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_op_assign_reg_148 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_372 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_137 <= indvar_flatten_next_reg_376;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                indvar_flatten_reg_137 <= ap_const_lv62_0;
            end if; 
        end if;
    end process;

    p_1_rec_i_i_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_372 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                p_1_rec_i_i_reg_159 <= p_rec_i_i_reg_396;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                p_1_rec_i_i_reg_159 <= ap_const_lv31_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dMapout_data_V_1_load_A = ap_const_logic_1)) then
                dMapout_data_V_1_payload_A <= p_Result_s_fu_339_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dMapout_data_V_1_load_B = ap_const_logic_1)) then
                dMapout_data_V_1_payload_B <= p_Result_s_fu_339_p5;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dMapout_last_V_1_load_A = ap_const_logic_1)) then
                dMapout_last_V_1_payload_A <= dMapout_last_V_tmp_reg_386;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dMapout_last_V_1_load_B = ap_const_logic_1)) then
                dMapout_last_V_1_payload_B <= dMapout_last_V_tmp_reg_386;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_257_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                dMapout_last_V_tmp_reg_386 <= dMapout_last_V_tmp_fu_309_p3;
                dMapout_user_V_tmp_reg_381 <= dMapout_user_V_tmp_fu_291_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dMapout_user_V_1_load_A = ap_const_logic_1)) then
                dMapout_user_V_1_payload_A <= dMapout_user_V_tmp_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((dMapout_user_V_1_load_B = ap_const_logic_1)) then
                dMapout_user_V_1_payload_B <= dMapout_user_V_tmp_reg_381;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_flatten_reg_372 <= exitcond_flatten_fu_257_p2;
                exitcond_flatten_reg_372_pp0_iter1_reg <= exitcond_flatten_reg_372;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_257_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                i_op_assign_mid2_reg_391 <= i_op_assign_mid2_fu_317_p3;
                p_rec_i_i_reg_396 <= p_rec_i_i_fu_331_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                indvar_flatten_next_reg_376 <= indvar_flatten_next_fu_262_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((packets_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                packets_loc_read_reg_349 <= packets_loc_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_372 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                tmp_151_reg_401 <= dMap_data_stream_0_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_372 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                tmp_152_reg_406 <= dMap_data_stream_0_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_reg_372 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                tmp_153_reg_411 <= dMap_data_stream_0_V_dout;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_26_i_i_reg_356 <= tmp_26_i_i_fu_223_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, packets_loc_empty_n, dMapout_data_V_1_ack_in, dMapout_user_V_1_ack_in, dMapout_last_V_1_ack_in, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, exitcond_flatten_fu_257_p2, ap_block_pp0_stage0_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage1_subdone, ap_CS_fsm_state9, ap_block_pp0_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((packets_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((exitcond_flatten_fu_257_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                elsif (((exitcond_flatten_fu_257_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage1_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_state9 => 
                if ((not(((dMapout_data_V_1_ack_in = ap_const_logic_0) or (dMapout_last_V_1_ack_in = ap_const_logic_0) or (dMapout_user_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state9 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(dMap_data_stream_0_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_372)
    begin
                ap_block_pp0_stage0_01001 <= ((exitcond_flatten_reg_372 = ap_const_lv1_0) and (dMap_data_stream_0_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(dMap_data_stream_0_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_372, ap_block_state7_io)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state7_io) or ((exitcond_flatten_reg_372 = ap_const_lv1_0) and (dMap_data_stream_0_V_empty_n = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(dMap_data_stream_0_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_372, ap_block_state7_io)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state7_io) or ((exitcond_flatten_reg_372 = ap_const_lv1_0) and (dMap_data_stream_0_V_empty_n = ap_const_logic_0))));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_11001_assign_proc : process(dMap_data_stream_0_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_372, ap_enable_reg_pp0_iter0, ap_block_state8_io)
    begin
                ap_block_pp0_stage1_11001 <= (((exitcond_flatten_reg_372 = ap_const_lv1_0) and (dMap_data_stream_0_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state8_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(dMap_data_stream_0_V_empty_n, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_372, ap_enable_reg_pp0_iter0, ap_block_state8_io)
    begin
                ap_block_pp0_stage1_subdone <= (((exitcond_flatten_reg_372 = ap_const_lv1_0) and (dMap_data_stream_0_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state8_io) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(dMap_data_stream_0_V_empty_n, exitcond_flatten_reg_372, ap_enable_reg_pp0_iter0)
    begin
                ap_block_pp0_stage2_11001 <= ((exitcond_flatten_reg_372 = ap_const_lv1_0) and (dMap_data_stream_0_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(dMap_data_stream_0_V_empty_n, exitcond_flatten_reg_372, ap_enable_reg_pp0_iter0)
    begin
                ap_block_pp0_stage2_subdone <= ((exitcond_flatten_reg_372 = ap_const_lv1_0) and (dMap_data_stream_0_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_11001_assign_proc : process(dMap_data_stream_0_V_empty_n, exitcond_flatten_reg_372, ap_enable_reg_pp0_iter0)
    begin
                ap_block_pp0_stage3_11001 <= ((exitcond_flatten_reg_372 = ap_const_lv1_0) and (dMap_data_stream_0_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(dMap_data_stream_0_V_empty_n, exitcond_flatten_reg_372, ap_enable_reg_pp0_iter0)
    begin
                ap_block_pp0_stage3_subdone <= ((exitcond_flatten_reg_372 = ap_const_lv1_0) and (dMap_data_stream_0_V_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, packets_loc_empty_n)
    begin
                ap_block_state1 <= ((packets_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_pp0_stage1_iter0_assign_proc : process(dMap_data_stream_0_V_empty_n, exitcond_flatten_reg_372)
    begin
                ap_block_state4_pp0_stage1_iter0 <= ((exitcond_flatten_reg_372 = ap_const_lv1_0) and (dMap_data_stream_0_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state5_pp0_stage2_iter0_assign_proc : process(dMap_data_stream_0_V_empty_n, exitcond_flatten_reg_372)
    begin
                ap_block_state5_pp0_stage2_iter0 <= ((exitcond_flatten_reg_372 = ap_const_lv1_0) and (dMap_data_stream_0_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state6_pp0_stage3_iter0_assign_proc : process(dMap_data_stream_0_V_empty_n, exitcond_flatten_reg_372)
    begin
                ap_block_state6_pp0_stage3_iter0 <= ((exitcond_flatten_reg_372 = ap_const_lv1_0) and (dMap_data_stream_0_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state7_io_assign_proc : process(dMapout_last_V_1_ack_in, exitcond_flatten_reg_372)
    begin
                ap_block_state7_io <= ((exitcond_flatten_reg_372 = ap_const_lv1_0) and (dMapout_last_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_block_state7_pp0_stage0_iter1_assign_proc : process(dMap_data_stream_0_V_empty_n, exitcond_flatten_reg_372)
    begin
                ap_block_state7_pp0_stage0_iter1 <= ((exitcond_flatten_reg_372 = ap_const_lv1_0) and (dMap_data_stream_0_V_empty_n = ap_const_logic_0));
    end process;


    ap_block_state8_io_assign_proc : process(dMapout_last_V_1_ack_in, exitcond_flatten_reg_372_pp0_iter1_reg)
    begin
                ap_block_state8_io <= ((exitcond_flatten_reg_372_pp0_iter1_reg = ap_const_lv1_0) and (dMapout_last_V_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state8_pp0_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state9_assign_proc : process(dMapout_data_V_1_ack_in, dMapout_user_V_1_ack_in, dMapout_last_V_1_ack_in)
    begin
                ap_block_state9 <= ((dMapout_data_V_1_ack_in = ap_const_logic_0) or (dMapout_last_V_1_ack_in = ap_const_logic_0) or (dMapout_user_V_1_ack_in = ap_const_logic_0));
    end process;


    ap_condition_pp0_exit_iter0_state3_assign_proc : process(exitcond_flatten_fu_257_p2)
    begin
        if ((exitcond_flatten_fu_257_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_done_reg, dMapout_data_V_1_ack_in, dMapout_user_V_1_ack_in, dMapout_last_V_1_ack_in, ap_CS_fsm_state9)
    begin
        if ((not(((dMapout_data_V_1_ack_in = ap_const_logic_0) or (dMapout_last_V_1_ack_in = ap_const_logic_0) or (dMapout_user_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_op_assign_phi_fu_152_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_372, i_op_assign_reg_148, i_op_assign_mid2_reg_391)
    begin
        if (((exitcond_flatten_reg_372 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_i_op_assign_phi_fu_152_p4 <= i_op_assign_mid2_reg_391;
        else 
            ap_phi_mux_i_op_assign_phi_fu_152_p4 <= i_op_assign_reg_148;
        end if; 
    end process;


    ap_phi_mux_indvar_flatten_phi_fu_141_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_372, indvar_flatten_reg_137, indvar_flatten_next_reg_376)
    begin
        if (((exitcond_flatten_reg_372 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_indvar_flatten_phi_fu_141_p4 <= indvar_flatten_next_reg_376;
        else 
            ap_phi_mux_indvar_flatten_phi_fu_141_p4 <= indvar_flatten_reg_137;
        end if; 
    end process;


    ap_phi_mux_p_1_rec_i_i_phi_fu_163_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_372, p_1_rec_i_i_reg_159, p_rec_i_i_reg_396)
    begin
        if (((exitcond_flatten_reg_372 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_phi_mux_p_1_rec_i_i_phi_fu_163_p4 <= p_rec_i_i_reg_396;
        else 
            ap_phi_mux_p_1_rec_i_i_phi_fu_163_p4 <= p_1_rec_i_i_reg_159;
        end if; 
    end process;


    ap_ready_assign_proc : process(dMapout_data_V_1_ack_in, dMapout_user_V_1_ack_in, dMapout_last_V_1_ack_in, ap_CS_fsm_state9)
    begin
        if ((not(((dMapout_data_V_1_ack_in = ap_const_logic_0) or (dMapout_last_V_1_ack_in = ap_const_logic_0) or (dMapout_user_V_1_ack_in = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    bound_fu_251_p0 <= bound_fu_251_p00(30 - 1 downto 0);
    bound_fu_251_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_68_fu_229_p4),62));
    bound_fu_251_p1 <= bound_fu_251_p10(32 - 1 downto 0);
    bound_fu_251_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(rows_V),62));
    bound_fu_251_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_fu_251_p0) * unsigned(bound_fu_251_p1), 62));

    dMap_data_stream_0_V_blk_n_assign_proc : process(dMap_data_stream_0_V_empty_n, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_372, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3)
    begin
        if ((((exitcond_flatten_reg_372 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((exitcond_flatten_reg_372 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((exitcond_flatten_reg_372 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((exitcond_flatten_reg_372 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            dMap_data_stream_0_V_blk_n <= dMap_data_stream_0_V_empty_n;
        else 
            dMap_data_stream_0_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    dMap_data_stream_0_V_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_372, ap_CS_fsm_pp0_stage1, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage0_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((exitcond_flatten_reg_372 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((exitcond_flatten_reg_372 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)) or ((exitcond_flatten_reg_372 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((exitcond_flatten_reg_372 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            dMap_data_stream_0_V_read <= ap_const_logic_1;
        else 
            dMap_data_stream_0_V_read <= ap_const_logic_0;
        end if; 
    end process;

    dMapout_TDATA <= dMapout_data_V_1_data_out;

    dMapout_TDATA_blk_n_assign_proc : process(dMapout_data_V_1_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, exitcond_flatten_reg_372, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, exitcond_flatten_reg_372_pp0_iter1_reg)
    begin
        if ((((exitcond_flatten_reg_372_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((exitcond_flatten_reg_372 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            dMapout_TDATA_blk_n <= dMapout_data_V_1_state(1);
        else 
            dMapout_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    dMapout_TLAST <= dMapout_last_V_1_data_out;
    dMapout_TUSER <= dMapout_user_V_1_data_out;
    dMapout_TVALID <= dMapout_last_V_1_state(0);
    dMapout_data_V_1_ack_in <= dMapout_data_V_1_state(1);
    dMapout_data_V_1_ack_out <= dMapout_TREADY;

    dMapout_data_V_1_data_out_assign_proc : process(dMapout_data_V_1_payload_A, dMapout_data_V_1_payload_B, dMapout_data_V_1_sel)
    begin
        if ((dMapout_data_V_1_sel = ap_const_logic_1)) then 
            dMapout_data_V_1_data_out <= dMapout_data_V_1_payload_B;
        else 
            dMapout_data_V_1_data_out <= dMapout_data_V_1_payload_A;
        end if; 
    end process;

    dMapout_data_V_1_load_A <= (not(dMapout_data_V_1_sel_wr) and dMapout_data_V_1_state_cmp_full);
    dMapout_data_V_1_load_B <= (dMapout_data_V_1_state_cmp_full and dMapout_data_V_1_sel_wr);
    dMapout_data_V_1_sel <= dMapout_data_V_1_sel_rd;
    dMapout_data_V_1_state_cmp_full <= '0' when (dMapout_data_V_1_state = ap_const_lv2_1) else '1';

    dMapout_data_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_372, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_372 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dMapout_data_V_1_vld_in <= ap_const_logic_1;
        else 
            dMapout_data_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dMapout_data_V_1_vld_out <= dMapout_data_V_1_state(0);
    dMapout_last_V_1_ack_in <= dMapout_last_V_1_state(1);
    dMapout_last_V_1_ack_out <= dMapout_TREADY;

    dMapout_last_V_1_data_out_assign_proc : process(dMapout_last_V_1_payload_A, dMapout_last_V_1_payload_B, dMapout_last_V_1_sel)
    begin
        if ((dMapout_last_V_1_sel = ap_const_logic_1)) then 
            dMapout_last_V_1_data_out <= dMapout_last_V_1_payload_B;
        else 
            dMapout_last_V_1_data_out <= dMapout_last_V_1_payload_A;
        end if; 
    end process;

    dMapout_last_V_1_load_A <= (not(dMapout_last_V_1_sel_wr) and dMapout_last_V_1_state_cmp_full);
    dMapout_last_V_1_load_B <= (dMapout_last_V_1_state_cmp_full and dMapout_last_V_1_sel_wr);
    dMapout_last_V_1_sel <= dMapout_last_V_1_sel_rd;
    dMapout_last_V_1_state_cmp_full <= '0' when (dMapout_last_V_1_state = ap_const_lv2_1) else '1';

    dMapout_last_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_372, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_372 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dMapout_last_V_1_vld_in <= ap_const_logic_1;
        else 
            dMapout_last_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dMapout_last_V_1_vld_out <= dMapout_last_V_1_state(0);
    dMapout_last_V_tmp_fu_309_p3 <= 
        tmp_32_i_i_mid1_fu_299_p2 when (exitcond3_i_i7_fu_286_p2(0) = '1') else 
        tmp_32_i_i2_fu_304_p2;
    dMapout_user_V_1_ack_in <= dMapout_user_V_1_state(1);
    dMapout_user_V_1_ack_out <= dMapout_TREADY;

    dMapout_user_V_1_data_out_assign_proc : process(dMapout_user_V_1_payload_A, dMapout_user_V_1_payload_B, dMapout_user_V_1_sel)
    begin
        if ((dMapout_user_V_1_sel = ap_const_logic_1)) then 
            dMapout_user_V_1_data_out <= dMapout_user_V_1_payload_B;
        else 
            dMapout_user_V_1_data_out <= dMapout_user_V_1_payload_A;
        end if; 
    end process;

    dMapout_user_V_1_load_A <= (not(dMapout_user_V_1_sel_wr) and dMapout_user_V_1_state_cmp_full);
    dMapout_user_V_1_load_B <= (dMapout_user_V_1_state_cmp_full and dMapout_user_V_1_sel_wr);
    dMapout_user_V_1_sel <= dMapout_user_V_1_sel_rd;
    dMapout_user_V_1_state_cmp_full <= '0' when (dMapout_user_V_1_state = ap_const_lv2_1) else '1';

    dMapout_user_V_1_vld_in_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, exitcond_flatten_reg_372, ap_block_pp0_stage0_11001)
    begin
        if (((exitcond_flatten_reg_372 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dMapout_user_V_1_vld_in <= ap_const_logic_1;
        else 
            dMapout_user_V_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    dMapout_user_V_1_vld_out <= dMapout_user_V_1_state(0);
    dMapout_user_V_tmp_fu_291_p3 <= 
        tmp_31_i_i_mid1_fu_274_p2 when (exitcond3_i_i7_fu_286_p2(0) = '1') else 
        tmp_31_i_i3_fu_280_p2;
    exitcond3_i_i7_fu_286_p2 <= "1" when (ap_phi_mux_p_1_rec_i_i_phi_fu_163_p4 = tmp_14_cast_i_i_fu_239_p1) else "0";
    exitcond_flatten_fu_257_p2 <= "1" when (ap_phi_mux_indvar_flatten_phi_fu_141_p4 = bound_fu_251_p2) else "0";
    i_op_assign_mid2_fu_317_p3 <= 
        r_fu_268_p2 when (exitcond3_i_i7_fu_286_p2(0) = '1') else 
        ap_phi_mux_i_op_assign_phi_fu_152_p4;
    indvar_flatten_next_fu_262_p2 <= std_logic_vector(unsigned(ap_phi_mux_indvar_flatten_phi_fu_141_p4) + unsigned(ap_const_lv62_1));
    p_1_rec_i_i_op_fu_325_p2 <= std_logic_vector(unsigned(ap_phi_mux_p_1_rec_i_i_phi_fu_163_p4) + unsigned(ap_const_lv31_1));
    p_Result_s_fu_339_p5 <= (((dMap_data_stream_0_V_dout & tmp_153_reg_411) & tmp_152_reg_406) & tmp_151_reg_401);
    p_lshr_f_i_i_fu_202_p4 <= packets_loc_read_reg_349(31 downto 1);
    p_lshr_i_i_fu_182_p4 <= p_neg_i_i_fu_177_p2(31 downto 1);
    p_neg_i_i_fu_177_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(packets_loc_read_reg_349));
    p_neg_t_i_i_fu_196_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(tmp_s_fu_192_p1));
    p_rec_i_i_fu_331_p3 <= 
        ap_const_lv31_1 when (exitcond3_i_i7_fu_286_p2(0) = '1') else 
        p_1_rec_i_i_op_fu_325_p2;

    packets_loc_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, packets_loc_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            packets_loc_blk_n <= packets_loc_empty_n;
        else 
            packets_loc_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    packets_loc_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, packets_loc_empty_n)
    begin
        if ((not(((packets_loc_empty_n = ap_const_logic_0) or (ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            packets_loc_read <= ap_const_logic_1;
        else 
            packets_loc_read <= ap_const_logic_0;
        end if; 
    end process;

    r_fu_268_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_op_assign_phi_fu_152_p4) + unsigned(ap_const_lv32_1));
    tmp_14_cast_i_i_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_68_fu_229_p4),31));
    tmp_25_i_i_fu_215_p3 <= 
        p_neg_t_i_i_fu_196_p2 when (tmp_fu_170_p3(0) = '1') else 
        tmp_67_fu_211_p1;
    tmp_26_i_i_fu_223_p2 <= std_logic_vector(unsigned(tmp_25_i_i_fu_215_p3) + unsigned(ap_const_lv32_FFFFFFFF));
    tmp_31_i_i3_fu_280_p2 <= "1" when (ap_phi_mux_i_op_assign_phi_fu_152_p4 = ap_const_lv32_0) else "0";
    tmp_31_i_i_mid1_fu_274_p2 <= "1" when (r_fu_268_p2 = ap_const_lv32_0) else "0";
    tmp_32_i_i2_fu_304_p2 <= "1" when (ap_phi_mux_i_op_assign_phi_fu_152_p4 = tmp_26_i_i_reg_356) else "0";
    tmp_32_i_i_mid1_fu_299_p2 <= "1" when (r_fu_268_p2 = tmp_26_i_i_reg_356) else "0";
    tmp_67_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_lshr_f_i_i_fu_202_p4),32));
    tmp_68_fu_229_p4 <= cols_V(31 downto 2);
    tmp_fu_170_p3 <= packets_loc_read_reg_349(31 downto 31);
    tmp_s_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_lshr_i_i_fu_182_p4),32));
end behav;
