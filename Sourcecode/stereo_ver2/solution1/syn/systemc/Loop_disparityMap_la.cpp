// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Loop_disparityMap_la.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Loop_disparityMap_la::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Loop_disparityMap_la::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> Loop_disparityMap_la::ap_ST_fsm_state1 = "1";
const sc_lv<5> Loop_disparityMap_la::ap_ST_fsm_state2 = "10";
const sc_lv<5> Loop_disparityMap_la::ap_ST_fsm_state3 = "100";
const sc_lv<5> Loop_disparityMap_la::ap_ST_fsm_state4 = "1000";
const sc_lv<5> Loop_disparityMap_la::ap_ST_fsm_state5 = "10000";
const sc_lv<32> Loop_disparityMap_la::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> Loop_disparityMap_la::ap_const_lv1_0 = "0";
const sc_lv<1> Loop_disparityMap_la::ap_const_lv1_1 = "1";
const sc_lv<2> Loop_disparityMap_la::ap_const_lv2_0 = "00";
const sc_lv<2> Loop_disparityMap_la::ap_const_lv2_2 = "10";
const sc_lv<2> Loop_disparityMap_la::ap_const_lv2_3 = "11";
const sc_lv<2> Loop_disparityMap_la::ap_const_lv2_1 = "1";
const sc_lv<32> Loop_disparityMap_la::ap_const_lv32_3 = "11";
const sc_lv<32> Loop_disparityMap_la::ap_const_lv32_1 = "1";
const sc_lv<32> Loop_disparityMap_la::ap_const_lv32_2 = "10";
const sc_lv<32> Loop_disparityMap_la::ap_const_lv32_4 = "100";
const sc_lv<41> Loop_disparityMap_la::ap_const_lv41_0 = "00000000000000000000000000000000000000000";
const sc_lv<31> Loop_disparityMap_la::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<41> Loop_disparityMap_la::ap_const_lv41_168 = "101101000";
const sc_lv<31> Loop_disparityMap_la::ap_const_lv31_1 = "1";
const sc_lv<18> Loop_disparityMap_la::ap_const_lv18_1 = "1";
const sc_lv<32> Loop_disparityMap_la::ap_const_lv32_8 = "1000";
const sc_lv<32> Loop_disparityMap_la::ap_const_lv32_F = "1111";
const sc_lv<32> Loop_disparityMap_la::ap_const_lv32_10 = "10000";
const sc_lv<32> Loop_disparityMap_la::ap_const_lv32_17 = "10111";
const sc_lv<32> Loop_disparityMap_la::ap_const_lv32_18 = "11000";
const sc_lv<32> Loop_disparityMap_la::ap_const_lv32_1F = "11111";
const bool Loop_disparityMap_la::ap_const_boolean_1 = true;

Loop_disparityMap_la::Loop_disparityMap_la(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_i_fu_195_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_i_fu_195_p2 );

    SC_METHOD(thread_c_fu_215_p2);
    sensitive << ( i_op_assign_1_reg_174 );

    SC_METHOD(thread_exitcond2_i_fu_210_p2);
    sensitive << ( p_read );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( lftr_wideiv_cast_i_fu_206_p1 );

    SC_METHOD(thread_exitcond_i_fu_195_p2);
    sensitive << ( rows_V );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_op_assign_reg_152 );

    SC_METHOD(thread_in_stream_TDATA_blk_n);
    sensitive << ( in_stream_data_V_0_state );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_in_stream_TREADY);
    sensitive << ( in_stream_data_V_0_state );

    SC_METHOD(thread_in_stream_data_V_0_ack_in);
    sensitive << ( in_stream_data_V_0_state );

    SC_METHOD(thread_in_stream_data_V_0_ack_out);
    sensitive << ( in_stream_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_in_stream_data_V_0_data_out);
    sensitive << ( in_stream_data_V_0_payload_A );
    sensitive << ( in_stream_data_V_0_payload_B );
    sensitive << ( in_stream_data_V_0_sel );

    SC_METHOD(thread_in_stream_data_V_0_load_A);
    sensitive << ( in_stream_data_V_0_sel_wr );
    sensitive << ( in_stream_data_V_0_state_cmp_full );

    SC_METHOD(thread_in_stream_data_V_0_load_B);
    sensitive << ( in_stream_data_V_0_sel_wr );
    sensitive << ( in_stream_data_V_0_state_cmp_full );

    SC_METHOD(thread_in_stream_data_V_0_sel);
    sensitive << ( in_stream_data_V_0_sel_rd );

    SC_METHOD(thread_in_stream_data_V_0_state_cmp_full);
    sensitive << ( in_stream_data_V_0_state );

    SC_METHOD(thread_in_stream_data_V_0_vld_in);
    sensitive << ( in_stream_TVALID );

    SC_METHOD(thread_in_stream_data_V_0_vld_out);
    sensitive << ( in_stream_data_V_0_state );

    SC_METHOD(thread_leftImage_in_V_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_1_cast_fu_261_p1 );

    SC_METHOD(thread_leftImage_in_V_address1);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_2_cast_fu_271_p1 );

    SC_METHOD(thread_leftImage_in_V_ce0);
    sensitive << ( in_stream_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_leftImage_in_V_ce1);
    sensitive << ( in_stream_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_leftImage_in_V_d0);
    sensitive << ( in_stream_data_V_0_data_out );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_leftImage_in_V_d1);
    sensitive << ( in_stream_data_V_0_data_out );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_leftImage_in_V_we0);
    sensitive << ( in_stream_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_leftImage_in_V_we1);
    sensitive << ( in_stream_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_lftr_wideiv_cast_i_fu_206_p1);
    sensitive << ( i_op_assign_1_reg_174 );

    SC_METHOD(thread_next_mul_fu_189_p2);
    sensitive << ( phi_mul_reg_163 );

    SC_METHOD(thread_r_fu_200_p2);
    sensitive << ( i_op_assign_reg_152 );

    SC_METHOD(thread_rightImage_in_V_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_1_cast_fu_261_p1 );

    SC_METHOD(thread_rightImage_in_V_address1);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_2_cast_fu_271_p1 );

    SC_METHOD(thread_rightImage_in_V_ce0);
    sensitive << ( in_stream_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_rightImage_in_V_ce1);
    sensitive << ( in_stream_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_rightImage_in_V_d0);
    sensitive << ( in_stream_data_V_0_data_out );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_rightImage_in_V_d1);
    sensitive << ( in_stream_data_V_0_data_out );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_rightImage_in_V_we0);
    sensitive << ( in_stream_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_rightImage_in_V_we1);
    sensitive << ( in_stream_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_tmp_10_fu_250_p2);
    sensitive << ( tmp_9_fu_242_p3 );

    SC_METHOD(thread_tmp_1_cast_fu_261_p1);
    sensitive << ( tmp_1_reg_347 );

    SC_METHOD(thread_tmp_1_fu_237_p2);
    sensitive << ( tmp_reg_319 );
    sensitive << ( tmp_22_i_cast_fu_229_p3 );

    SC_METHOD(thread_tmp_22_i_cast_fu_229_p3);
    sensitive << ( tmp_7_fu_225_p1 );

    SC_METHOD(thread_tmp_2_cast_fu_271_p1);
    sensitive << ( tmp_2_reg_352 );

    SC_METHOD(thread_tmp_2_fu_256_p2);
    sensitive << ( tmp_reg_319 );
    sensitive << ( tmp_10_fu_250_p2 );

    SC_METHOD(thread_tmp_6_fu_221_p1);
    sensitive << ( i_op_assign_1_reg_174 );

    SC_METHOD(thread_tmp_7_fu_225_p1);
    sensitive << ( i_op_assign_1_reg_174 );

    SC_METHOD(thread_tmp_9_fu_242_p3);
    sensitive << ( tmp_6_fu_221_p1 );

    SC_METHOD(thread_tmp_fu_185_p1);
    sensitive << ( phi_mul_reg_163 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_stream_data_V_0_vld_out );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_i_fu_195_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond2_i_fu_210_p2 );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "00001";
    in_stream_data_V_0_sel_rd = SC_LOGIC_0;
    in_stream_data_V_0_sel_wr = SC_LOGIC_0;
    in_stream_data_V_0_state = "00";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Loop_disparityMap_la_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, rows_V, "(port)rows_V");
    sc_trace(mVcdFile, in_stream_TDATA, "(port)in_stream_TDATA");
    sc_trace(mVcdFile, in_stream_TVALID, "(port)in_stream_TVALID");
    sc_trace(mVcdFile, in_stream_TREADY, "(port)in_stream_TREADY");
    sc_trace(mVcdFile, p_read, "(port)p_read");
    sc_trace(mVcdFile, p_read1, "(port)p_read1");
    sc_trace(mVcdFile, leftImage_in_V_address0, "(port)leftImage_in_V_address0");
    sc_trace(mVcdFile, leftImage_in_V_ce0, "(port)leftImage_in_V_ce0");
    sc_trace(mVcdFile, leftImage_in_V_we0, "(port)leftImage_in_V_we0");
    sc_trace(mVcdFile, leftImage_in_V_d0, "(port)leftImage_in_V_d0");
    sc_trace(mVcdFile, leftImage_in_V_address1, "(port)leftImage_in_V_address1");
    sc_trace(mVcdFile, leftImage_in_V_ce1, "(port)leftImage_in_V_ce1");
    sc_trace(mVcdFile, leftImage_in_V_we1, "(port)leftImage_in_V_we1");
    sc_trace(mVcdFile, leftImage_in_V_d1, "(port)leftImage_in_V_d1");
    sc_trace(mVcdFile, rightImage_in_V_address0, "(port)rightImage_in_V_address0");
    sc_trace(mVcdFile, rightImage_in_V_ce0, "(port)rightImage_in_V_ce0");
    sc_trace(mVcdFile, rightImage_in_V_we0, "(port)rightImage_in_V_we0");
    sc_trace(mVcdFile, rightImage_in_V_d0, "(port)rightImage_in_V_d0");
    sc_trace(mVcdFile, rightImage_in_V_address1, "(port)rightImage_in_V_address1");
    sc_trace(mVcdFile, rightImage_in_V_ce1, "(port)rightImage_in_V_ce1");
    sc_trace(mVcdFile, rightImage_in_V_we1, "(port)rightImage_in_V_we1");
    sc_trace(mVcdFile, rightImage_in_V_d1, "(port)rightImage_in_V_d1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, in_stream_data_V_0_data_out, "in_stream_data_V_0_data_out");
    sc_trace(mVcdFile, in_stream_data_V_0_vld_in, "in_stream_data_V_0_vld_in");
    sc_trace(mVcdFile, in_stream_data_V_0_vld_out, "in_stream_data_V_0_vld_out");
    sc_trace(mVcdFile, in_stream_data_V_0_ack_in, "in_stream_data_V_0_ack_in");
    sc_trace(mVcdFile, in_stream_data_V_0_ack_out, "in_stream_data_V_0_ack_out");
    sc_trace(mVcdFile, in_stream_data_V_0_payload_A, "in_stream_data_V_0_payload_A");
    sc_trace(mVcdFile, in_stream_data_V_0_payload_B, "in_stream_data_V_0_payload_B");
    sc_trace(mVcdFile, in_stream_data_V_0_sel_rd, "in_stream_data_V_0_sel_rd");
    sc_trace(mVcdFile, in_stream_data_V_0_sel_wr, "in_stream_data_V_0_sel_wr");
    sc_trace(mVcdFile, in_stream_data_V_0_sel, "in_stream_data_V_0_sel");
    sc_trace(mVcdFile, in_stream_data_V_0_load_A, "in_stream_data_V_0_load_A");
    sc_trace(mVcdFile, in_stream_data_V_0_load_B, "in_stream_data_V_0_load_B");
    sc_trace(mVcdFile, in_stream_data_V_0_state, "in_stream_data_V_0_state");
    sc_trace(mVcdFile, in_stream_data_V_0_state_cmp_full, "in_stream_data_V_0_state_cmp_full");
    sc_trace(mVcdFile, in_stream_TDATA_blk_n, "in_stream_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, tmp_fu_185_p1, "tmp_fu_185_p1");
    sc_trace(mVcdFile, tmp_reg_319, "tmp_reg_319");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, next_mul_fu_189_p2, "next_mul_fu_189_p2");
    sc_trace(mVcdFile, next_mul_reg_325, "next_mul_reg_325");
    sc_trace(mVcdFile, exitcond_i_fu_195_p2, "exitcond_i_fu_195_p2");
    sc_trace(mVcdFile, r_fu_200_p2, "r_fu_200_p2");
    sc_trace(mVcdFile, r_reg_334, "r_reg_334");
    sc_trace(mVcdFile, c_fu_215_p2, "c_fu_215_p2");
    sc_trace(mVcdFile, c_reg_342, "c_reg_342");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_1_fu_237_p2, "tmp_1_fu_237_p2");
    sc_trace(mVcdFile, tmp_1_reg_347, "tmp_1_reg_347");
    sc_trace(mVcdFile, exitcond2_i_fu_210_p2, "exitcond2_i_fu_210_p2");
    sc_trace(mVcdFile, tmp_2_fu_256_p2, "tmp_2_fu_256_p2");
    sc_trace(mVcdFile, tmp_2_reg_352, "tmp_2_reg_352");
    sc_trace(mVcdFile, i_op_assign_reg_152, "i_op_assign_reg_152");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, phi_mul_reg_163, "phi_mul_reg_163");
    sc_trace(mVcdFile, i_op_assign_1_reg_174, "i_op_assign_1_reg_174");
    sc_trace(mVcdFile, tmp_1_cast_fu_261_p1, "tmp_1_cast_fu_261_p1");
    sc_trace(mVcdFile, tmp_2_cast_fu_271_p1, "tmp_2_cast_fu_271_p1");
    sc_trace(mVcdFile, lftr_wideiv_cast_i_fu_206_p1, "lftr_wideiv_cast_i_fu_206_p1");
    sc_trace(mVcdFile, tmp_7_fu_225_p1, "tmp_7_fu_225_p1");
    sc_trace(mVcdFile, tmp_22_i_cast_fu_229_p3, "tmp_22_i_cast_fu_229_p3");
    sc_trace(mVcdFile, tmp_6_fu_221_p1, "tmp_6_fu_221_p1");
    sc_trace(mVcdFile, tmp_9_fu_242_p3, "tmp_9_fu_242_p3");
    sc_trace(mVcdFile, tmp_10_fu_250_p2, "tmp_10_fu_250_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

Loop_disparityMap_la::~Loop_disparityMap_la() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void Loop_disparityMap_la::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_i_fu_195_p2.read()))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(in_stream_data_V_0_vld_out.read(), ap_const_logic_1))) {
        i_op_assign_1_reg_174 = c_reg_342.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_i_fu_195_p2.read()))) {
        i_op_assign_1_reg_174 = ap_const_lv31_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        i_op_assign_reg_152 = r_reg_334.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        i_op_assign_reg_152 = ap_const_lv32_0;
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_stream_data_V_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_vld_out.read()))) {
            in_stream_data_V_0_sel_rd =  (sc_logic) (~in_stream_data_V_0_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_stream_data_V_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_ack_in.read()))) {
            in_stream_data_V_0_sel_wr =  (sc_logic) (~in_stream_data_V_0_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        in_stream_data_V_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_stream_data_V_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_ack_out.read()) && 
              esl_seteq<1,2,2>(in_stream_data_V_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_stream_data_V_0_vld_in.read()) && 
              esl_seteq<1,2,2>(in_stream_data_V_0_state.read(), ap_const_lv2_2)))) {
            in_stream_data_V_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_stream_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_stream_data_V_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_stream_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_stream_data_V_0_state.read(), ap_const_lv2_1)))) {
            in_stream_data_V_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(in_stream_data_V_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_stream_data_V_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(in_stream_data_V_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_stream_data_V_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_stream_data_V_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_ack_out.read()))))) {
            in_stream_data_V_0_state = ap_const_lv2_3;
        } else {
            in_stream_data_V_0_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        phi_mul_reg_163 = next_mul_reg_325.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        phi_mul_reg_163 = ap_const_lv41_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        c_reg_342 = c_fu_215_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_load_A.read())) {
        in_stream_data_V_0_payload_A = in_stream_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_load_B.read())) {
        in_stream_data_V_0_payload_B = in_stream_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        next_mul_reg_325 = next_mul_fu_189_p2.read();
        r_reg_334 = r_fu_200_p2.read();
        tmp_reg_319 = tmp_fu_185_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_i_fu_210_p2.read()))) {
        tmp_1_reg_347 = tmp_1_fu_237_p2.read();
        tmp_2_reg_352 = tmp_2_fu_256_p2.read();
    }
}

void Loop_disparityMap_la::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Loop_disparityMap_la::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Loop_disparityMap_la::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Loop_disparityMap_la::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void Loop_disparityMap_la::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void Loop_disparityMap_la::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void Loop_disparityMap_la::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_i_fu_195_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void Loop_disparityMap_la::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Loop_disparityMap_la::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_i_fu_195_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Loop_disparityMap_la::thread_c_fu_215_p2() {
    c_fu_215_p2 = (!i_op_assign_1_reg_174.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(i_op_assign_1_reg_174.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void Loop_disparityMap_la::thread_exitcond2_i_fu_210_p2() {
    exitcond2_i_fu_210_p2 = (!lftr_wideiv_cast_i_fu_206_p1.read().is_01() || !p_read.read().is_01())? sc_lv<1>(): sc_lv<1>(lftr_wideiv_cast_i_fu_206_p1.read() == p_read.read());
}

void Loop_disparityMap_la::thread_exitcond_i_fu_195_p2() {
    exitcond_i_fu_195_p2 = (!i_op_assign_reg_152.read().is_01() || !rows_V.read().is_01())? sc_lv<1>(): sc_lv<1>(i_op_assign_reg_152.read() == rows_V.read());
}

void Loop_disparityMap_la::thread_in_stream_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        in_stream_TDATA_blk_n = in_stream_data_V_0_state.read()[0];
    } else {
        in_stream_TDATA_blk_n = ap_const_logic_1;
    }
}

void Loop_disparityMap_la::thread_in_stream_TREADY() {
    in_stream_TREADY = in_stream_data_V_0_state.read()[1];
}

void Loop_disparityMap_la::thread_in_stream_data_V_0_ack_in() {
    in_stream_data_V_0_ack_in = in_stream_data_V_0_state.read()[1];
}

void Loop_disparityMap_la::thread_in_stream_data_V_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(in_stream_data_V_0_vld_out.read(), ap_const_logic_1))) {
        in_stream_data_V_0_ack_out = ap_const_logic_1;
    } else {
        in_stream_data_V_0_ack_out = ap_const_logic_0;
    }
}

void Loop_disparityMap_la::thread_in_stream_data_V_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_stream_data_V_0_sel.read())) {
        in_stream_data_V_0_data_out = in_stream_data_V_0_payload_B.read();
    } else {
        in_stream_data_V_0_data_out = in_stream_data_V_0_payload_A.read();
    }
}

void Loop_disparityMap_la::thread_in_stream_data_V_0_load_A() {
    in_stream_data_V_0_load_A = (in_stream_data_V_0_state_cmp_full.read() & ~in_stream_data_V_0_sel_wr.read());
}

void Loop_disparityMap_la::thread_in_stream_data_V_0_load_B() {
    in_stream_data_V_0_load_B = (in_stream_data_V_0_sel_wr.read() & in_stream_data_V_0_state_cmp_full.read());
}

void Loop_disparityMap_la::thread_in_stream_data_V_0_sel() {
    in_stream_data_V_0_sel = in_stream_data_V_0_sel_rd.read();
}

void Loop_disparityMap_la::thread_in_stream_data_V_0_state_cmp_full() {
    in_stream_data_V_0_state_cmp_full =  (sc_logic) ((!in_stream_data_V_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in_stream_data_V_0_state.read() != ap_const_lv2_1))[0];
}

void Loop_disparityMap_la::thread_in_stream_data_V_0_vld_in() {
    in_stream_data_V_0_vld_in = in_stream_TVALID.read();
}

void Loop_disparityMap_la::thread_in_stream_data_V_0_vld_out() {
    in_stream_data_V_0_vld_out = in_stream_data_V_0_state.read()[0];
}

void Loop_disparityMap_la::thread_leftImage_in_V_address0() {
    leftImage_in_V_address0 =  (sc_lv<17>) (tmp_1_cast_fu_261_p1.read());
}

void Loop_disparityMap_la::thread_leftImage_in_V_address1() {
    leftImage_in_V_address1 =  (sc_lv<17>) (tmp_2_cast_fu_271_p1.read());
}

void Loop_disparityMap_la::thread_leftImage_in_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(in_stream_data_V_0_vld_out.read(), ap_const_logic_1))) {
        leftImage_in_V_ce0 = ap_const_logic_1;
    } else {
        leftImage_in_V_ce0 = ap_const_logic_0;
    }
}

void Loop_disparityMap_la::thread_leftImage_in_V_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(in_stream_data_V_0_vld_out.read(), ap_const_logic_1))) {
        leftImage_in_V_ce1 = ap_const_logic_1;
    } else {
        leftImage_in_V_ce1 = ap_const_logic_0;
    }
}

void Loop_disparityMap_la::thread_leftImage_in_V_d0() {
    leftImage_in_V_d0 = in_stream_data_V_0_data_out.read().range(8-1, 0);
}

void Loop_disparityMap_la::thread_leftImage_in_V_d1() {
    leftImage_in_V_d1 = in_stream_data_V_0_data_out.read().range(15, 8);
}

void Loop_disparityMap_la::thread_leftImage_in_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(in_stream_data_V_0_vld_out.read(), ap_const_logic_1))) {
        leftImage_in_V_we0 = ap_const_logic_1;
    } else {
        leftImage_in_V_we0 = ap_const_logic_0;
    }
}

void Loop_disparityMap_la::thread_leftImage_in_V_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(in_stream_data_V_0_vld_out.read(), ap_const_logic_1))) {
        leftImage_in_V_we1 = ap_const_logic_1;
    } else {
        leftImage_in_V_we1 = ap_const_logic_0;
    }
}

void Loop_disparityMap_la::thread_lftr_wideiv_cast_i_fu_206_p1() {
    lftr_wideiv_cast_i_fu_206_p1 = esl_zext<32,31>(i_op_assign_1_reg_174.read());
}

void Loop_disparityMap_la::thread_next_mul_fu_189_p2() {
    next_mul_fu_189_p2 = (!ap_const_lv41_168.is_01() || !phi_mul_reg_163.read().is_01())? sc_lv<41>(): (sc_biguint<41>(ap_const_lv41_168) + sc_biguint<41>(phi_mul_reg_163.read()));
}

void Loop_disparityMap_la::thread_r_fu_200_p2() {
    r_fu_200_p2 = (!ap_const_lv32_1.is_01() || !i_op_assign_reg_152.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_1) + sc_biguint<32>(i_op_assign_reg_152.read()));
}

void Loop_disparityMap_la::thread_rightImage_in_V_address0() {
    rightImage_in_V_address0 =  (sc_lv<17>) (tmp_1_cast_fu_261_p1.read());
}

void Loop_disparityMap_la::thread_rightImage_in_V_address1() {
    rightImage_in_V_address1 =  (sc_lv<17>) (tmp_2_cast_fu_271_p1.read());
}

void Loop_disparityMap_la::thread_rightImage_in_V_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(in_stream_data_V_0_vld_out.read(), ap_const_logic_1))) {
        rightImage_in_V_ce0 = ap_const_logic_1;
    } else {
        rightImage_in_V_ce0 = ap_const_logic_0;
    }
}

void Loop_disparityMap_la::thread_rightImage_in_V_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(in_stream_data_V_0_vld_out.read(), ap_const_logic_1))) {
        rightImage_in_V_ce1 = ap_const_logic_1;
    } else {
        rightImage_in_V_ce1 = ap_const_logic_0;
    }
}

void Loop_disparityMap_la::thread_rightImage_in_V_d0() {
    rightImage_in_V_d0 = in_stream_data_V_0_data_out.read().range(23, 16);
}

void Loop_disparityMap_la::thread_rightImage_in_V_d1() {
    rightImage_in_V_d1 = in_stream_data_V_0_data_out.read().range(31, 24);
}

void Loop_disparityMap_la::thread_rightImage_in_V_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(in_stream_data_V_0_vld_out.read(), ap_const_logic_1))) {
        rightImage_in_V_we0 = ap_const_logic_1;
    } else {
        rightImage_in_V_we0 = ap_const_logic_0;
    }
}

void Loop_disparityMap_la::thread_rightImage_in_V_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(in_stream_data_V_0_vld_out.read(), ap_const_logic_1))) {
        rightImage_in_V_we1 = ap_const_logic_1;
    } else {
        rightImage_in_V_we1 = ap_const_logic_0;
    }
}

void Loop_disparityMap_la::thread_tmp_10_fu_250_p2() {
    tmp_10_fu_250_p2 = (tmp_9_fu_242_p3.read() | ap_const_lv18_1);
}

void Loop_disparityMap_la::thread_tmp_1_cast_fu_261_p1() {
    tmp_1_cast_fu_261_p1 = esl_zext<64,18>(tmp_1_reg_347.read());
}

void Loop_disparityMap_la::thread_tmp_1_fu_237_p2() {
    tmp_1_fu_237_p2 = (!tmp_22_i_cast_fu_229_p3.read().is_01() || !tmp_reg_319.read().is_01())? sc_lv<18>(): (sc_biguint<18>(tmp_22_i_cast_fu_229_p3.read()) + sc_biguint<18>(tmp_reg_319.read()));
}

void Loop_disparityMap_la::thread_tmp_22_i_cast_fu_229_p3() {
    tmp_22_i_cast_fu_229_p3 = esl_concat<17,1>(tmp_7_fu_225_p1.read(), ap_const_lv1_0);
}

void Loop_disparityMap_la::thread_tmp_2_cast_fu_271_p1() {
    tmp_2_cast_fu_271_p1 = esl_zext<64,18>(tmp_2_reg_352.read());
}

void Loop_disparityMap_la::thread_tmp_2_fu_256_p2() {
    tmp_2_fu_256_p2 = (!tmp_10_fu_250_p2.read().is_01() || !tmp_reg_319.read().is_01())? sc_lv<18>(): (sc_biguint<18>(tmp_10_fu_250_p2.read()) + sc_biguint<18>(tmp_reg_319.read()));
}

void Loop_disparityMap_la::thread_tmp_6_fu_221_p1() {
    tmp_6_fu_221_p1 = i_op_assign_1_reg_174.read().range(17-1, 0);
}

void Loop_disparityMap_la::thread_tmp_7_fu_225_p1() {
    tmp_7_fu_225_p1 = i_op_assign_1_reg_174.read().range(17-1, 0);
}

void Loop_disparityMap_la::thread_tmp_9_fu_242_p3() {
    tmp_9_fu_242_p3 = esl_concat<17,1>(tmp_6_fu_221_p1.read(), ap_const_lv1_0);
}

void Loop_disparityMap_la::thread_tmp_fu_185_p1() {
    tmp_fu_185_p1 = phi_mul_reg_163.read().range(18-1, 0);
}

void Loop_disparityMap_la::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_i_fu_195_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_i_fu_210_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(in_stream_data_V_0_vld_out.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm = "XXXXX";
            break;
    }
}

}

