// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Loop_disparityMap_la_HH_
#define _Loop_disparityMap_la_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Loop_disparityMap_la : public sc_module {
    // Port declarations 29
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > rows_V;
    sc_in< sc_lv<32> > in_stream_TDATA;
    sc_in< sc_logic > in_stream_TVALID;
    sc_out< sc_logic > in_stream_TREADY;
    sc_in< sc_lv<32> > p_read;
    sc_in< sc_lv<63> > p_read1;
    sc_out< sc_lv<17> > leftImage_in_V_address0;
    sc_out< sc_logic > leftImage_in_V_ce0;
    sc_out< sc_logic > leftImage_in_V_we0;
    sc_out< sc_lv<8> > leftImage_in_V_d0;
    sc_out< sc_lv<17> > leftImage_in_V_address1;
    sc_out< sc_logic > leftImage_in_V_ce1;
    sc_out< sc_logic > leftImage_in_V_we1;
    sc_out< sc_lv<8> > leftImage_in_V_d1;
    sc_out< sc_lv<17> > rightImage_in_V_address0;
    sc_out< sc_logic > rightImage_in_V_ce0;
    sc_out< sc_logic > rightImage_in_V_we0;
    sc_out< sc_lv<8> > rightImage_in_V_d0;
    sc_out< sc_lv<17> > rightImage_in_V_address1;
    sc_out< sc_logic > rightImage_in_V_ce1;
    sc_out< sc_logic > rightImage_in_V_we1;
    sc_out< sc_lv<8> > rightImage_in_V_d1;


    // Module declarations
    Loop_disparityMap_la(sc_module_name name);
    SC_HAS_PROCESS(Loop_disparityMap_la);

    ~Loop_disparityMap_la();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > in_stream_data_V_0_data_out;
    sc_signal< sc_logic > in_stream_data_V_0_vld_in;
    sc_signal< sc_logic > in_stream_data_V_0_vld_out;
    sc_signal< sc_logic > in_stream_data_V_0_ack_in;
    sc_signal< sc_logic > in_stream_data_V_0_ack_out;
    sc_signal< sc_lv<32> > in_stream_data_V_0_payload_A;
    sc_signal< sc_lv<32> > in_stream_data_V_0_payload_B;
    sc_signal< sc_logic > in_stream_data_V_0_sel_rd;
    sc_signal< sc_logic > in_stream_data_V_0_sel_wr;
    sc_signal< sc_logic > in_stream_data_V_0_sel;
    sc_signal< sc_logic > in_stream_data_V_0_load_A;
    sc_signal< sc_logic > in_stream_data_V_0_load_B;
    sc_signal< sc_lv<2> > in_stream_data_V_0_state;
    sc_signal< sc_logic > in_stream_data_V_0_state_cmp_full;
    sc_signal< sc_logic > in_stream_TDATA_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<18> > tmp_fu_185_p1;
    sc_signal< sc_lv<18> > tmp_reg_319;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<41> > next_mul_fu_189_p2;
    sc_signal< sc_lv<41> > next_mul_reg_325;
    sc_signal< sc_lv<1> > exitcond_i_fu_195_p2;
    sc_signal< sc_lv<32> > r_fu_200_p2;
    sc_signal< sc_lv<32> > r_reg_334;
    sc_signal< sc_lv<31> > c_fu_215_p2;
    sc_signal< sc_lv<31> > c_reg_342;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<18> > tmp_1_fu_237_p2;
    sc_signal< sc_lv<18> > tmp_1_reg_347;
    sc_signal< sc_lv<1> > exitcond2_i_fu_210_p2;
    sc_signal< sc_lv<18> > tmp_2_fu_256_p2;
    sc_signal< sc_lv<18> > tmp_2_reg_352;
    sc_signal< sc_lv<32> > i_op_assign_reg_152;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<41> > phi_mul_reg_163;
    sc_signal< sc_lv<31> > i_op_assign_1_reg_174;
    sc_signal< sc_lv<64> > tmp_1_cast_fu_261_p1;
    sc_signal< sc_lv<64> > tmp_2_cast_fu_271_p1;
    sc_signal< sc_lv<32> > lftr_wideiv_cast_i_fu_206_p1;
    sc_signal< sc_lv<17> > tmp_7_fu_225_p1;
    sc_signal< sc_lv<18> > tmp_22_i_cast_fu_229_p3;
    sc_signal< sc_lv<17> > tmp_6_fu_221_p1;
    sc_signal< sc_lv<18> > tmp_9_fu_242_p3;
    sc_signal< sc_lv<18> > tmp_10_fu_250_p2;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<41> ap_const_lv41_0;
    static const sc_lv<31> ap_const_lv31_0;
    static const sc_lv<41> ap_const_lv41_168;
    static const sc_lv<31> ap_const_lv31_1;
    static const sc_lv<18> ap_const_lv18_1;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_17;
    static const sc_lv<32> ap_const_lv32_18;
    static const sc_lv<32> ap_const_lv32_1F;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_c_fu_215_p2();
    void thread_exitcond2_i_fu_210_p2();
    void thread_exitcond_i_fu_195_p2();
    void thread_in_stream_TDATA_blk_n();
    void thread_in_stream_TREADY();
    void thread_in_stream_data_V_0_ack_in();
    void thread_in_stream_data_V_0_ack_out();
    void thread_in_stream_data_V_0_data_out();
    void thread_in_stream_data_V_0_load_A();
    void thread_in_stream_data_V_0_load_B();
    void thread_in_stream_data_V_0_sel();
    void thread_in_stream_data_V_0_state_cmp_full();
    void thread_in_stream_data_V_0_vld_in();
    void thread_in_stream_data_V_0_vld_out();
    void thread_leftImage_in_V_address0();
    void thread_leftImage_in_V_address1();
    void thread_leftImage_in_V_ce0();
    void thread_leftImage_in_V_ce1();
    void thread_leftImage_in_V_d0();
    void thread_leftImage_in_V_d1();
    void thread_leftImage_in_V_we0();
    void thread_leftImage_in_V_we1();
    void thread_lftr_wideiv_cast_i_fu_206_p1();
    void thread_next_mul_fu_189_p2();
    void thread_r_fu_200_p2();
    void thread_rightImage_in_V_address0();
    void thread_rightImage_in_V_address1();
    void thread_rightImage_in_V_ce0();
    void thread_rightImage_in_V_ce1();
    void thread_rightImage_in_V_d0();
    void thread_rightImage_in_V_d1();
    void thread_rightImage_in_V_we0();
    void thread_rightImage_in_V_we1();
    void thread_tmp_10_fu_250_p2();
    void thread_tmp_1_cast_fu_261_p1();
    void thread_tmp_1_fu_237_p2();
    void thread_tmp_22_i_cast_fu_229_p3();
    void thread_tmp_2_cast_fu_271_p1();
    void thread_tmp_2_fu_256_p2();
    void thread_tmp_6_fu_221_p1();
    void thread_tmp_7_fu_225_p1();
    void thread_tmp_9_fu_242_p3();
    void thread_tmp_fu_185_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
