// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Loop_4_proc.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Loop_4_proc::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Loop_4_proc::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> Loop_4_proc::ap_ST_fsm_state1 = "1";
const sc_lv<7> Loop_4_proc::ap_ST_fsm_state2 = "10";
const sc_lv<7> Loop_4_proc::ap_ST_fsm_pp0_stage0 = "100";
const sc_lv<7> Loop_4_proc::ap_ST_fsm_pp0_stage1 = "1000";
const sc_lv<7> Loop_4_proc::ap_ST_fsm_pp0_stage2 = "10000";
const sc_lv<7> Loop_4_proc::ap_ST_fsm_pp0_stage3 = "100000";
const sc_lv<7> Loop_4_proc::ap_ST_fsm_state9 = "1000000";
const sc_lv<32> Loop_4_proc::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool Loop_4_proc::ap_const_boolean_1 = true;
const sc_lv<1> Loop_4_proc::ap_const_lv1_0 = "0";
const sc_lv<1> Loop_4_proc::ap_const_lv1_1 = "1";
const sc_lv<2> Loop_4_proc::ap_const_lv2_0 = "00";
const sc_lv<2> Loop_4_proc::ap_const_lv2_2 = "10";
const sc_lv<2> Loop_4_proc::ap_const_lv2_3 = "11";
const sc_lv<2> Loop_4_proc::ap_const_lv2_1 = "1";
const sc_lv<32> Loop_4_proc::ap_const_lv32_2 = "10";
const bool Loop_4_proc::ap_const_boolean_0 = false;
const sc_lv<32> Loop_4_proc::ap_const_lv32_3 = "11";
const sc_lv<32> Loop_4_proc::ap_const_lv32_4 = "100";
const sc_lv<32> Loop_4_proc::ap_const_lv32_5 = "101";
const sc_lv<32> Loop_4_proc::ap_const_lv32_1 = "1";
const sc_lv<62> Loop_4_proc::ap_const_lv62_0 = "00000000000000000000000000000000000000000000000000000000000000";
const sc_lv<31> Loop_4_proc::ap_const_lv31_0 = "0000000000000000000000000000000";
const sc_lv<32> Loop_4_proc::ap_const_lv32_1F = "11111";
const sc_lv<32> Loop_4_proc::ap_const_lv32_FFFFFFFF = "11111111111111111111111111111111";
const sc_lv<62> Loop_4_proc::ap_const_lv62_1 = "1";
const sc_lv<31> Loop_4_proc::ap_const_lv31_1 = "1";
const sc_lv<32> Loop_4_proc::ap_const_lv32_6 = "110";

Loop_4_proc::Loop_4_proc(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0);

    SC_METHOD(thread_ap_block_pp0_stage0_01001);
    sensitive << ( dMap_data_stream_0_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_372 );

    SC_METHOD(thread_ap_block_pp0_stage0_11001);
    sensitive << ( dMap_data_stream_0_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_372 );
    sensitive << ( ap_block_state7_io );

    SC_METHOD(thread_ap_block_pp0_stage0_subdone);
    sensitive << ( dMap_data_stream_0_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_372 );
    sensitive << ( ap_block_state7_io );

    SC_METHOD(thread_ap_block_pp0_stage1);

    SC_METHOD(thread_ap_block_pp0_stage1_11001);
    sensitive << ( dMap_data_stream_0_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_372 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_state8_io );

    SC_METHOD(thread_ap_block_pp0_stage1_subdone);
    sensitive << ( dMap_data_stream_0_V_empty_n );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_372 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_state8_io );

    SC_METHOD(thread_ap_block_pp0_stage2);

    SC_METHOD(thread_ap_block_pp0_stage2_11001);
    sensitive << ( dMap_data_stream_0_V_empty_n );
    sensitive << ( exitcond_flatten_reg_372 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_block_pp0_stage2_subdone);
    sensitive << ( dMap_data_stream_0_V_empty_n );
    sensitive << ( exitcond_flatten_reg_372 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_block_pp0_stage3);

    SC_METHOD(thread_ap_block_pp0_stage3_11001);
    sensitive << ( dMap_data_stream_0_V_empty_n );
    sensitive << ( exitcond_flatten_reg_372 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_block_pp0_stage3_subdone);
    sensitive << ( dMap_data_stream_0_V_empty_n );
    sensitive << ( exitcond_flatten_reg_372 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( packets_loc_empty_n );

    SC_METHOD(thread_ap_block_state3_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state4_pp0_stage1_iter0);
    sensitive << ( dMap_data_stream_0_V_empty_n );
    sensitive << ( exitcond_flatten_reg_372 );

    SC_METHOD(thread_ap_block_state5_pp0_stage2_iter0);
    sensitive << ( dMap_data_stream_0_V_empty_n );
    sensitive << ( exitcond_flatten_reg_372 );

    SC_METHOD(thread_ap_block_state6_pp0_stage3_iter0);
    sensitive << ( dMap_data_stream_0_V_empty_n );
    sensitive << ( exitcond_flatten_reg_372 );

    SC_METHOD(thread_ap_block_state7_io);
    sensitive << ( dMapout_last_V_1_ack_in );
    sensitive << ( exitcond_flatten_reg_372 );

    SC_METHOD(thread_ap_block_state7_pp0_stage0_iter1);
    sensitive << ( dMap_data_stream_0_V_empty_n );
    sensitive << ( exitcond_flatten_reg_372 );

    SC_METHOD(thread_ap_block_state8_io);
    sensitive << ( dMapout_last_V_1_ack_in );
    sensitive << ( exitcond_flatten_reg_372_pp0_iter1_reg );

    SC_METHOD(thread_ap_block_state8_pp0_stage1_iter1);

    SC_METHOD(thread_ap_block_state9);
    sensitive << ( dMapout_data_V_1_ack_in );
    sensitive << ( dMapout_user_V_1_ack_in );
    sensitive << ( dMapout_last_V_1_ack_in );

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state3);
    sensitive << ( exitcond_flatten_fu_257_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( dMapout_data_V_1_ack_in );
    sensitive << ( dMapout_user_V_1_ack_in );
    sensitive << ( dMapout_last_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );

    SC_METHOD(thread_ap_phi_mux_i_op_assign_phi_fu_152_p4);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_reg_372 );
    sensitive << ( i_op_assign_reg_148 );
    sensitive << ( i_op_assign_mid2_reg_391 );

    SC_METHOD(thread_ap_phi_mux_indvar_flatten_phi_fu_141_p4);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_reg_372 );
    sensitive << ( indvar_flatten_reg_137 );
    sensitive << ( indvar_flatten_next_reg_376 );

    SC_METHOD(thread_ap_phi_mux_p_1_rec_i_i_phi_fu_163_p4);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_reg_372 );
    sensitive << ( p_1_rec_i_i_reg_159 );
    sensitive << ( p_rec_i_i_reg_396 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( dMapout_data_V_1_ack_in );
    sensitive << ( dMapout_user_V_1_ack_in );
    sensitive << ( dMapout_last_V_1_ack_in );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_bound_fu_251_p0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( bound_fu_251_p00 );

    SC_METHOD(thread_bound_fu_251_p00);
    sensitive << ( tmp_68_fu_229_p4 );

    SC_METHOD(thread_bound_fu_251_p1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( bound_fu_251_p10 );

    SC_METHOD(thread_bound_fu_251_p10);
    sensitive << ( rows_V );

    SC_METHOD(thread_bound_fu_251_p2);
    sensitive << ( bound_fu_251_p0 );
    sensitive << ( bound_fu_251_p1 );

    SC_METHOD(thread_dMap_data_stream_0_V_blk_n);
    sensitive << ( dMap_data_stream_0_V_empty_n );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_reg_372 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_block_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3 );

    SC_METHOD(thread_dMap_data_stream_0_V_read);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_372 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_block_pp0_stage1_11001 );
    sensitive << ( ap_block_pp0_stage2_11001 );
    sensitive << ( ap_block_pp0_stage3_11001 );

    SC_METHOD(thread_dMapout_TDATA);
    sensitive << ( dMapout_data_V_1_data_out );

    SC_METHOD(thread_dMapout_TDATA_blk_n);
    sensitive << ( dMapout_data_V_1_state );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0 );
    sensitive << ( exitcond_flatten_reg_372 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_block_pp0_stage1 );
    sensitive << ( exitcond_flatten_reg_372_pp0_iter1_reg );

    SC_METHOD(thread_dMapout_TLAST);
    sensitive << ( dMapout_last_V_1_data_out );

    SC_METHOD(thread_dMapout_TUSER);
    sensitive << ( dMapout_user_V_1_data_out );

    SC_METHOD(thread_dMapout_TVALID);
    sensitive << ( dMapout_last_V_1_state );

    SC_METHOD(thread_dMapout_data_V_1_ack_in);
    sensitive << ( dMapout_data_V_1_state );

    SC_METHOD(thread_dMapout_data_V_1_ack_out);
    sensitive << ( dMapout_TREADY );

    SC_METHOD(thread_dMapout_data_V_1_data_out);
    sensitive << ( dMapout_data_V_1_payload_A );
    sensitive << ( dMapout_data_V_1_payload_B );
    sensitive << ( dMapout_data_V_1_sel );

    SC_METHOD(thread_dMapout_data_V_1_load_A);
    sensitive << ( dMapout_data_V_1_sel_wr );
    sensitive << ( dMapout_data_V_1_state_cmp_full );

    SC_METHOD(thread_dMapout_data_V_1_load_B);
    sensitive << ( dMapout_data_V_1_sel_wr );
    sensitive << ( dMapout_data_V_1_state_cmp_full );

    SC_METHOD(thread_dMapout_data_V_1_sel);
    sensitive << ( dMapout_data_V_1_sel_rd );

    SC_METHOD(thread_dMapout_data_V_1_state_cmp_full);
    sensitive << ( dMapout_data_V_1_state );

    SC_METHOD(thread_dMapout_data_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_372 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_dMapout_data_V_1_vld_out);
    sensitive << ( dMapout_data_V_1_state );

    SC_METHOD(thread_dMapout_last_V_1_ack_in);
    sensitive << ( dMapout_last_V_1_state );

    SC_METHOD(thread_dMapout_last_V_1_ack_out);
    sensitive << ( dMapout_TREADY );

    SC_METHOD(thread_dMapout_last_V_1_data_out);
    sensitive << ( dMapout_last_V_1_payload_A );
    sensitive << ( dMapout_last_V_1_payload_B );
    sensitive << ( dMapout_last_V_1_sel );

    SC_METHOD(thread_dMapout_last_V_1_load_A);
    sensitive << ( dMapout_last_V_1_sel_wr );
    sensitive << ( dMapout_last_V_1_state_cmp_full );

    SC_METHOD(thread_dMapout_last_V_1_load_B);
    sensitive << ( dMapout_last_V_1_sel_wr );
    sensitive << ( dMapout_last_V_1_state_cmp_full );

    SC_METHOD(thread_dMapout_last_V_1_sel);
    sensitive << ( dMapout_last_V_1_sel_rd );

    SC_METHOD(thread_dMapout_last_V_1_state_cmp_full);
    sensitive << ( dMapout_last_V_1_state );

    SC_METHOD(thread_dMapout_last_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_372 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_dMapout_last_V_1_vld_out);
    sensitive << ( dMapout_last_V_1_state );

    SC_METHOD(thread_dMapout_last_V_tmp_fu_309_p3);
    sensitive << ( exitcond3_i_i7_fu_286_p2 );
    sensitive << ( tmp_32_i_i_mid1_fu_299_p2 );
    sensitive << ( tmp_32_i_i2_fu_304_p2 );

    SC_METHOD(thread_dMapout_user_V_1_ack_in);
    sensitive << ( dMapout_user_V_1_state );

    SC_METHOD(thread_dMapout_user_V_1_ack_out);
    sensitive << ( dMapout_TREADY );

    SC_METHOD(thread_dMapout_user_V_1_data_out);
    sensitive << ( dMapout_user_V_1_payload_A );
    sensitive << ( dMapout_user_V_1_payload_B );
    sensitive << ( dMapout_user_V_1_sel );

    SC_METHOD(thread_dMapout_user_V_1_load_A);
    sensitive << ( dMapout_user_V_1_sel_wr );
    sensitive << ( dMapout_user_V_1_state_cmp_full );

    SC_METHOD(thread_dMapout_user_V_1_load_B);
    sensitive << ( dMapout_user_V_1_sel_wr );
    sensitive << ( dMapout_user_V_1_state_cmp_full );

    SC_METHOD(thread_dMapout_user_V_1_sel);
    sensitive << ( dMapout_user_V_1_sel_rd );

    SC_METHOD(thread_dMapout_user_V_1_state_cmp_full);
    sensitive << ( dMapout_user_V_1_state );

    SC_METHOD(thread_dMapout_user_V_1_vld_in);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( exitcond_flatten_reg_372 );
    sensitive << ( ap_block_pp0_stage0_11001 );

    SC_METHOD(thread_dMapout_user_V_1_vld_out);
    sensitive << ( dMapout_user_V_1_state );

    SC_METHOD(thread_dMapout_user_V_tmp_fu_291_p3);
    sensitive << ( exitcond3_i_i7_fu_286_p2 );
    sensitive << ( tmp_31_i_i_mid1_fu_274_p2 );
    sensitive << ( tmp_31_i_i3_fu_280_p2 );

    SC_METHOD(thread_exitcond3_i_i7_fu_286_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_14_cast_i_i_fu_239_p1 );
    sensitive << ( exitcond_flatten_fu_257_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_phi_mux_p_1_rec_i_i_phi_fu_163_p4 );

    SC_METHOD(thread_exitcond_flatten_fu_257_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( bound_fu_251_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_phi_mux_indvar_flatten_phi_fu_141_p4 );

    SC_METHOD(thread_i_op_assign_mid2_fu_317_p3);
    sensitive << ( ap_phi_mux_i_op_assign_phi_fu_152_p4 );
    sensitive << ( r_fu_268_p2 );
    sensitive << ( exitcond3_i_i7_fu_286_p2 );

    SC_METHOD(thread_indvar_flatten_next_fu_262_p2);
    sensitive << ( ap_phi_mux_indvar_flatten_phi_fu_141_p4 );

    SC_METHOD(thread_p_1_rec_i_i_op_fu_325_p2);
    sensitive << ( ap_phi_mux_p_1_rec_i_i_phi_fu_163_p4 );

    SC_METHOD(thread_p_Result_s_fu_339_p5);
    sensitive << ( dMap_data_stream_0_V_dout );
    sensitive << ( tmp_151_reg_401 );
    sensitive << ( tmp_152_reg_406 );
    sensitive << ( tmp_153_reg_411 );

    SC_METHOD(thread_p_lshr_f_i_i_fu_202_p4);
    sensitive << ( packets_loc_read_reg_349 );

    SC_METHOD(thread_p_lshr_i_i_fu_182_p4);
    sensitive << ( p_neg_i_i_fu_177_p2 );

    SC_METHOD(thread_p_neg_i_i_fu_177_p2);
    sensitive << ( packets_loc_read_reg_349 );

    SC_METHOD(thread_p_neg_t_i_i_fu_196_p2);
    sensitive << ( tmp_s_fu_192_p1 );

    SC_METHOD(thread_p_rec_i_i_fu_331_p3);
    sensitive << ( exitcond3_i_i7_fu_286_p2 );
    sensitive << ( p_1_rec_i_i_op_fu_325_p2 );

    SC_METHOD(thread_packets_loc_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( packets_loc_empty_n );

    SC_METHOD(thread_packets_loc_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( packets_loc_empty_n );

    SC_METHOD(thread_r_fu_268_p2);
    sensitive << ( ap_phi_mux_i_op_assign_phi_fu_152_p4 );

    SC_METHOD(thread_tmp_14_cast_i_i_fu_239_p1);
    sensitive << ( tmp_68_fu_229_p4 );

    SC_METHOD(thread_tmp_25_i_i_fu_215_p3);
    sensitive << ( tmp_fu_170_p3 );
    sensitive << ( p_neg_t_i_i_fu_196_p2 );
    sensitive << ( tmp_67_fu_211_p1 );

    SC_METHOD(thread_tmp_26_i_i_fu_223_p2);
    sensitive << ( tmp_25_i_i_fu_215_p3 );

    SC_METHOD(thread_tmp_31_i_i3_fu_280_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond_flatten_fu_257_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_phi_mux_i_op_assign_phi_fu_152_p4 );

    SC_METHOD(thread_tmp_31_i_i_mid1_fu_274_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond_flatten_fu_257_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( r_fu_268_p2 );

    SC_METHOD(thread_tmp_32_i_i2_fu_304_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_26_i_i_reg_356 );
    sensitive << ( exitcond_flatten_fu_257_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( ap_phi_mux_i_op_assign_phi_fu_152_p4 );

    SC_METHOD(thread_tmp_32_i_i_mid1_fu_299_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( tmp_26_i_i_reg_356 );
    sensitive << ( exitcond_flatten_fu_257_p2 );
    sensitive << ( ap_block_pp0_stage0_11001 );
    sensitive << ( r_fu_268_p2 );

    SC_METHOD(thread_tmp_67_fu_211_p1);
    sensitive << ( p_lshr_f_i_i_fu_202_p4 );

    SC_METHOD(thread_tmp_68_fu_229_p4);
    sensitive << ( cols_V );

    SC_METHOD(thread_tmp_fu_170_p3);
    sensitive << ( packets_loc_read_reg_349 );

    SC_METHOD(thread_tmp_s_fu_192_p1);
    sensitive << ( p_lshr_i_i_fu_182_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( packets_loc_empty_n );
    sensitive << ( dMapout_data_V_1_ack_in );
    sensitive << ( dMapout_user_V_1_ack_in );
    sensitive << ( dMapout_last_V_1_ack_in );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( exitcond_flatten_fu_257_p2 );
    sensitive << ( ap_block_pp0_stage0_subdone );
    sensitive << ( ap_block_pp0_stage3_subdone );
    sensitive << ( ap_block_pp0_stage1_subdone );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_block_pp0_stage2_subdone );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "0000001";
    dMapout_data_V_1_sel_rd = SC_LOGIC_0;
    dMapout_data_V_1_sel_wr = SC_LOGIC_0;
    dMapout_data_V_1_state = "00";
    dMapout_user_V_1_sel_rd = SC_LOGIC_0;
    dMapout_user_V_1_sel_wr = SC_LOGIC_0;
    dMapout_user_V_1_state = "00";
    dMapout_last_V_1_sel_rd = SC_LOGIC_0;
    dMapout_last_V_1_sel_wr = SC_LOGIC_0;
    dMapout_last_V_1_state = "00";
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Loop_4_proc_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, packets_loc_dout, "(port)packets_loc_dout");
    sc_trace(mVcdFile, packets_loc_empty_n, "(port)packets_loc_empty_n");
    sc_trace(mVcdFile, packets_loc_read, "(port)packets_loc_read");
    sc_trace(mVcdFile, cols_V, "(port)cols_V");
    sc_trace(mVcdFile, rows_V, "(port)rows_V");
    sc_trace(mVcdFile, dMapout_TDATA, "(port)dMapout_TDATA");
    sc_trace(mVcdFile, dMapout_TVALID, "(port)dMapout_TVALID");
    sc_trace(mVcdFile, dMapout_TREADY, "(port)dMapout_TREADY");
    sc_trace(mVcdFile, dMap_data_stream_0_V_dout, "(port)dMap_data_stream_0_V_dout");
    sc_trace(mVcdFile, dMap_data_stream_0_V_empty_n, "(port)dMap_data_stream_0_V_empty_n");
    sc_trace(mVcdFile, dMap_data_stream_0_V_read, "(port)dMap_data_stream_0_V_read");
    sc_trace(mVcdFile, dMapout_TUSER, "(port)dMapout_TUSER");
    sc_trace(mVcdFile, dMapout_TLAST, "(port)dMapout_TLAST");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, dMapout_data_V_1_data_out, "dMapout_data_V_1_data_out");
    sc_trace(mVcdFile, dMapout_data_V_1_vld_in, "dMapout_data_V_1_vld_in");
    sc_trace(mVcdFile, dMapout_data_V_1_vld_out, "dMapout_data_V_1_vld_out");
    sc_trace(mVcdFile, dMapout_data_V_1_ack_in, "dMapout_data_V_1_ack_in");
    sc_trace(mVcdFile, dMapout_data_V_1_ack_out, "dMapout_data_V_1_ack_out");
    sc_trace(mVcdFile, dMapout_data_V_1_payload_A, "dMapout_data_V_1_payload_A");
    sc_trace(mVcdFile, dMapout_data_V_1_payload_B, "dMapout_data_V_1_payload_B");
    sc_trace(mVcdFile, dMapout_data_V_1_sel_rd, "dMapout_data_V_1_sel_rd");
    sc_trace(mVcdFile, dMapout_data_V_1_sel_wr, "dMapout_data_V_1_sel_wr");
    sc_trace(mVcdFile, dMapout_data_V_1_sel, "dMapout_data_V_1_sel");
    sc_trace(mVcdFile, dMapout_data_V_1_load_A, "dMapout_data_V_1_load_A");
    sc_trace(mVcdFile, dMapout_data_V_1_load_B, "dMapout_data_V_1_load_B");
    sc_trace(mVcdFile, dMapout_data_V_1_state, "dMapout_data_V_1_state");
    sc_trace(mVcdFile, dMapout_data_V_1_state_cmp_full, "dMapout_data_V_1_state_cmp_full");
    sc_trace(mVcdFile, dMapout_user_V_1_data_out, "dMapout_user_V_1_data_out");
    sc_trace(mVcdFile, dMapout_user_V_1_vld_in, "dMapout_user_V_1_vld_in");
    sc_trace(mVcdFile, dMapout_user_V_1_vld_out, "dMapout_user_V_1_vld_out");
    sc_trace(mVcdFile, dMapout_user_V_1_ack_in, "dMapout_user_V_1_ack_in");
    sc_trace(mVcdFile, dMapout_user_V_1_ack_out, "dMapout_user_V_1_ack_out");
    sc_trace(mVcdFile, dMapout_user_V_1_payload_A, "dMapout_user_V_1_payload_A");
    sc_trace(mVcdFile, dMapout_user_V_1_payload_B, "dMapout_user_V_1_payload_B");
    sc_trace(mVcdFile, dMapout_user_V_1_sel_rd, "dMapout_user_V_1_sel_rd");
    sc_trace(mVcdFile, dMapout_user_V_1_sel_wr, "dMapout_user_V_1_sel_wr");
    sc_trace(mVcdFile, dMapout_user_V_1_sel, "dMapout_user_V_1_sel");
    sc_trace(mVcdFile, dMapout_user_V_1_load_A, "dMapout_user_V_1_load_A");
    sc_trace(mVcdFile, dMapout_user_V_1_load_B, "dMapout_user_V_1_load_B");
    sc_trace(mVcdFile, dMapout_user_V_1_state, "dMapout_user_V_1_state");
    sc_trace(mVcdFile, dMapout_user_V_1_state_cmp_full, "dMapout_user_V_1_state_cmp_full");
    sc_trace(mVcdFile, dMapout_last_V_1_data_out, "dMapout_last_V_1_data_out");
    sc_trace(mVcdFile, dMapout_last_V_1_vld_in, "dMapout_last_V_1_vld_in");
    sc_trace(mVcdFile, dMapout_last_V_1_vld_out, "dMapout_last_V_1_vld_out");
    sc_trace(mVcdFile, dMapout_last_V_1_ack_in, "dMapout_last_V_1_ack_in");
    sc_trace(mVcdFile, dMapout_last_V_1_ack_out, "dMapout_last_V_1_ack_out");
    sc_trace(mVcdFile, dMapout_last_V_1_payload_A, "dMapout_last_V_1_payload_A");
    sc_trace(mVcdFile, dMapout_last_V_1_payload_B, "dMapout_last_V_1_payload_B");
    sc_trace(mVcdFile, dMapout_last_V_1_sel_rd, "dMapout_last_V_1_sel_rd");
    sc_trace(mVcdFile, dMapout_last_V_1_sel_wr, "dMapout_last_V_1_sel_wr");
    sc_trace(mVcdFile, dMapout_last_V_1_sel, "dMapout_last_V_1_sel");
    sc_trace(mVcdFile, dMapout_last_V_1_load_A, "dMapout_last_V_1_load_A");
    sc_trace(mVcdFile, dMapout_last_V_1_load_B, "dMapout_last_V_1_load_B");
    sc_trace(mVcdFile, dMapout_last_V_1_state, "dMapout_last_V_1_state");
    sc_trace(mVcdFile, dMapout_last_V_1_state_cmp_full, "dMapout_last_V_1_state_cmp_full");
    sc_trace(mVcdFile, packets_loc_blk_n, "packets_loc_blk_n");
    sc_trace(mVcdFile, dMapout_TDATA_blk_n, "dMapout_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0, "ap_block_pp0_stage0");
    sc_trace(mVcdFile, exitcond_flatten_reg_372, "exitcond_flatten_reg_372");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage1, "ap_CS_fsm_pp0_stage1");
    sc_trace(mVcdFile, ap_block_pp0_stage1, "ap_block_pp0_stage1");
    sc_trace(mVcdFile, exitcond_flatten_reg_372_pp0_iter1_reg, "exitcond_flatten_reg_372_pp0_iter1_reg");
    sc_trace(mVcdFile, dMap_data_stream_0_V_blk_n, "dMap_data_stream_0_V_blk_n");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage2, "ap_CS_fsm_pp0_stage2");
    sc_trace(mVcdFile, ap_block_pp0_stage2, "ap_block_pp0_stage2");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage3, "ap_CS_fsm_pp0_stage3");
    sc_trace(mVcdFile, ap_block_pp0_stage3, "ap_block_pp0_stage3");
    sc_trace(mVcdFile, indvar_flatten_reg_137, "indvar_flatten_reg_137");
    sc_trace(mVcdFile, i_op_assign_reg_148, "i_op_assign_reg_148");
    sc_trace(mVcdFile, p_1_rec_i_i_reg_159, "p_1_rec_i_i_reg_159");
    sc_trace(mVcdFile, packets_loc_read_reg_349, "packets_loc_read_reg_349");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, tmp_26_i_i_fu_223_p2, "tmp_26_i_i_fu_223_p2");
    sc_trace(mVcdFile, tmp_26_i_i_reg_356, "tmp_26_i_i_reg_356");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_14_cast_i_i_fu_239_p1, "tmp_14_cast_i_i_fu_239_p1");
    sc_trace(mVcdFile, bound_fu_251_p2, "bound_fu_251_p2");
    sc_trace(mVcdFile, exitcond_flatten_fu_257_p2, "exitcond_flatten_fu_257_p2");
    sc_trace(mVcdFile, ap_block_state3_pp0_stage0_iter0, "ap_block_state3_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage0_iter1, "ap_block_state7_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_state7_io, "ap_block_state7_io");
    sc_trace(mVcdFile, ap_block_pp0_stage0_11001, "ap_block_pp0_stage0_11001");
    sc_trace(mVcdFile, indvar_flatten_next_fu_262_p2, "indvar_flatten_next_fu_262_p2");
    sc_trace(mVcdFile, indvar_flatten_next_reg_376, "indvar_flatten_next_reg_376");
    sc_trace(mVcdFile, dMapout_user_V_tmp_fu_291_p3, "dMapout_user_V_tmp_fu_291_p3");
    sc_trace(mVcdFile, dMapout_user_V_tmp_reg_381, "dMapout_user_V_tmp_reg_381");
    sc_trace(mVcdFile, dMapout_last_V_tmp_fu_309_p3, "dMapout_last_V_tmp_fu_309_p3");
    sc_trace(mVcdFile, dMapout_last_V_tmp_reg_386, "dMapout_last_V_tmp_reg_386");
    sc_trace(mVcdFile, i_op_assign_mid2_fu_317_p3, "i_op_assign_mid2_fu_317_p3");
    sc_trace(mVcdFile, i_op_assign_mid2_reg_391, "i_op_assign_mid2_reg_391");
    sc_trace(mVcdFile, p_rec_i_i_fu_331_p3, "p_rec_i_i_fu_331_p3");
    sc_trace(mVcdFile, p_rec_i_i_reg_396, "p_rec_i_i_reg_396");
    sc_trace(mVcdFile, tmp_151_reg_401, "tmp_151_reg_401");
    sc_trace(mVcdFile, ap_block_state4_pp0_stage1_iter0, "ap_block_state4_pp0_stage1_iter0");
    sc_trace(mVcdFile, ap_block_state8_pp0_stage1_iter1, "ap_block_state8_pp0_stage1_iter1");
    sc_trace(mVcdFile, ap_block_state8_io, "ap_block_state8_io");
    sc_trace(mVcdFile, ap_block_pp0_stage1_11001, "ap_block_pp0_stage1_11001");
    sc_trace(mVcdFile, tmp_152_reg_406, "tmp_152_reg_406");
    sc_trace(mVcdFile, ap_block_state5_pp0_stage2_iter0, "ap_block_state5_pp0_stage2_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage2_11001, "ap_block_pp0_stage2_11001");
    sc_trace(mVcdFile, tmp_153_reg_411, "tmp_153_reg_411");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage3_iter0, "ap_block_state6_pp0_stage3_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage3_11001, "ap_block_pp0_stage3_11001");
    sc_trace(mVcdFile, p_Result_s_fu_339_p5, "p_Result_s_fu_339_p5");
    sc_trace(mVcdFile, ap_block_pp0_stage0_subdone, "ap_block_pp0_stage0_subdone");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state3, "ap_condition_pp0_exit_iter0_state3");
    sc_trace(mVcdFile, ap_block_pp0_stage3_subdone, "ap_block_pp0_stage3_subdone");
    sc_trace(mVcdFile, ap_block_pp0_stage1_subdone, "ap_block_pp0_stage1_subdone");
    sc_trace(mVcdFile, ap_phi_mux_indvar_flatten_phi_fu_141_p4, "ap_phi_mux_indvar_flatten_phi_fu_141_p4");
    sc_trace(mVcdFile, ap_phi_mux_i_op_assign_phi_fu_152_p4, "ap_phi_mux_i_op_assign_phi_fu_152_p4");
    sc_trace(mVcdFile, ap_phi_mux_p_1_rec_i_i_phi_fu_163_p4, "ap_phi_mux_p_1_rec_i_i_phi_fu_163_p4");
    sc_trace(mVcdFile, ap_block_pp0_stage0_01001, "ap_block_pp0_stage0_01001");
    sc_trace(mVcdFile, p_neg_i_i_fu_177_p2, "p_neg_i_i_fu_177_p2");
    sc_trace(mVcdFile, p_lshr_i_i_fu_182_p4, "p_lshr_i_i_fu_182_p4");
    sc_trace(mVcdFile, tmp_s_fu_192_p1, "tmp_s_fu_192_p1");
    sc_trace(mVcdFile, p_lshr_f_i_i_fu_202_p4, "p_lshr_f_i_i_fu_202_p4");
    sc_trace(mVcdFile, tmp_fu_170_p3, "tmp_fu_170_p3");
    sc_trace(mVcdFile, p_neg_t_i_i_fu_196_p2, "p_neg_t_i_i_fu_196_p2");
    sc_trace(mVcdFile, tmp_67_fu_211_p1, "tmp_67_fu_211_p1");
    sc_trace(mVcdFile, tmp_25_i_i_fu_215_p3, "tmp_25_i_i_fu_215_p3");
    sc_trace(mVcdFile, tmp_68_fu_229_p4, "tmp_68_fu_229_p4");
    sc_trace(mVcdFile, bound_fu_251_p0, "bound_fu_251_p0");
    sc_trace(mVcdFile, bound_fu_251_p1, "bound_fu_251_p1");
    sc_trace(mVcdFile, r_fu_268_p2, "r_fu_268_p2");
    sc_trace(mVcdFile, exitcond3_i_i7_fu_286_p2, "exitcond3_i_i7_fu_286_p2");
    sc_trace(mVcdFile, tmp_31_i_i_mid1_fu_274_p2, "tmp_31_i_i_mid1_fu_274_p2");
    sc_trace(mVcdFile, tmp_31_i_i3_fu_280_p2, "tmp_31_i_i3_fu_280_p2");
    sc_trace(mVcdFile, tmp_32_i_i_mid1_fu_299_p2, "tmp_32_i_i_mid1_fu_299_p2");
    sc_trace(mVcdFile, tmp_32_i_i2_fu_304_p2, "tmp_32_i_i2_fu_304_p2");
    sc_trace(mVcdFile, p_1_rec_i_i_op_fu_325_p2, "p_1_rec_i_i_op_fu_325_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_block_state9, "ap_block_state9");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_block_pp0_stage2_subdone, "ap_block_pp0_stage2_subdone");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
    sc_trace(mVcdFile, bound_fu_251_p00, "bound_fu_251_p00");
    sc_trace(mVcdFile, bound_fu_251_p10, "bound_fu_251_p10");
#endif

    }
}

Loop_4_proc::~Loop_4_proc() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void Loop_4_proc::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, dMapout_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dMapout_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dMapout_user_V_1_ack_in.read())))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state3.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
              esl_seteq<1,1,1>(ap_block_pp0_stage3_subdone.read(), ap_const_boolean_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
              esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0)))) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        dMapout_data_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, dMapout_data_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, dMapout_data_V_1_vld_out.read()))) {
            dMapout_data_V_1_sel_rd =  (sc_logic) (~dMapout_data_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        dMapout_data_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, dMapout_data_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, dMapout_data_V_1_ack_in.read()))) {
            dMapout_data_V_1_sel_wr =  (sc_logic) (~dMapout_data_V_1_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        dMapout_data_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, dMapout_data_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, dMapout_data_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(dMapout_data_V_1_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, dMapout_data_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(dMapout_data_V_1_state.read(), ap_const_lv2_2)))) {
            dMapout_data_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, dMapout_data_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, dMapout_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(dMapout_data_V_1_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, dMapout_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(dMapout_data_V_1_state.read(), ap_const_lv2_1)))) {
            dMapout_data_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, dMapout_data_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(dMapout_data_V_1_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, dMapout_data_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(dMapout_data_V_1_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(dMapout_data_V_1_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, dMapout_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, dMapout_data_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, dMapout_data_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, dMapout_data_V_1_ack_out.read()))))) {
            dMapout_data_V_1_state = ap_const_lv2_3;
        } else {
            dMapout_data_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        dMapout_last_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, dMapout_last_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, dMapout_last_V_1_vld_out.read()))) {
            dMapout_last_V_1_sel_rd =  (sc_logic) (~dMapout_last_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        dMapout_last_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, dMapout_last_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, dMapout_last_V_1_ack_in.read()))) {
            dMapout_last_V_1_sel_wr =  (sc_logic) (~dMapout_last_V_1_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        dMapout_last_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, dMapout_last_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, dMapout_last_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, dMapout_last_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, dMapout_last_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, dMapout_last_V_1_state.read())))) {
            dMapout_last_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, dMapout_last_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, dMapout_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, dMapout_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, dMapout_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, dMapout_last_V_1_state.read())))) {
            dMapout_last_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, dMapout_last_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, dMapout_last_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, dMapout_last_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, dMapout_last_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, dMapout_last_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, dMapout_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, dMapout_last_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, dMapout_last_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, dMapout_last_V_1_ack_out.read()))))) {
            dMapout_last_V_1_state = ap_const_lv2_3;
        } else {
            dMapout_last_V_1_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        dMapout_user_V_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, dMapout_user_V_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, dMapout_user_V_1_vld_out.read()))) {
            dMapout_user_V_1_sel_rd =  (sc_logic) (~dMapout_user_V_1_sel_rd.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        dMapout_user_V_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, dMapout_user_V_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, dMapout_user_V_1_ack_in.read()))) {
            dMapout_user_V_1_sel_wr =  (sc_logic) (~dMapout_user_V_1_sel_wr.read());
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        dMapout_user_V_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, dMapout_user_V_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, dMapout_user_V_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, dMapout_user_V_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, dMapout_user_V_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, dMapout_user_V_1_state.read())))) {
            dMapout_user_V_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, dMapout_user_V_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, dMapout_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, dMapout_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, dMapout_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, dMapout_user_V_1_state.read())))) {
            dMapout_user_V_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, dMapout_user_V_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, dMapout_user_V_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, dMapout_user_V_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, dMapout_user_V_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, dMapout_user_V_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, dMapout_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, dMapout_user_V_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, dMapout_user_V_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, dMapout_user_V_1_ack_out.read()))))) {
            dMapout_user_V_1_state = ap_const_lv2_3;
        } else {
            dMapout_user_V_1_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_372.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        i_op_assign_reg_148 = i_op_assign_mid2_reg_391.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        i_op_assign_reg_148 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_372.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        indvar_flatten_reg_137 = indvar_flatten_next_reg_376.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        indvar_flatten_reg_137 = ap_const_lv62_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_372.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        p_1_rec_i_i_reg_159 = p_rec_i_i_reg_396.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        p_1_rec_i_i_reg_159 = ap_const_lv31_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, dMapout_data_V_1_load_A.read())) {
        dMapout_data_V_1_payload_A = p_Result_s_fu_339_p5.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, dMapout_data_V_1_load_B.read())) {
        dMapout_data_V_1_payload_B = p_Result_s_fu_339_p5.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, dMapout_last_V_1_load_A.read())) {
        dMapout_last_V_1_payload_A = dMapout_last_V_tmp_reg_386.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, dMapout_last_V_1_load_B.read())) {
        dMapout_last_V_1_payload_B = dMapout_last_V_tmp_reg_386.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_257_p2.read()))) {
        dMapout_last_V_tmp_reg_386 = dMapout_last_V_tmp_fu_309_p3.read();
        dMapout_user_V_tmp_reg_381 = dMapout_user_V_tmp_fu_291_p3.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, dMapout_user_V_1_load_A.read())) {
        dMapout_user_V_1_payload_A = dMapout_user_V_tmp_reg_381.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, dMapout_user_V_1_load_B.read())) {
        dMapout_user_V_1_payload_B = dMapout_user_V_tmp_reg_381.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        exitcond_flatten_reg_372 = exitcond_flatten_fu_257_p2.read();
        exitcond_flatten_reg_372_pp0_iter1_reg = exitcond_flatten_reg_372.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_fu_257_p2.read()))) {
        i_op_assign_mid2_reg_391 = i_op_assign_mid2_fu_317_p3.read();
        p_rec_i_i_reg_396 = p_rec_i_i_fu_331_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        indvar_flatten_next_reg_376 = indvar_flatten_next_fu_262_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, packets_loc_empty_n.read())))) {
        packets_loc_read_reg_349 = packets_loc_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_372.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0))) {
        tmp_151_reg_401 = dMap_data_stream_0_V_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_372.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0))) {
        tmp_152_reg_406 = dMap_data_stream_0_V_dout.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_372.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0))) {
        tmp_153_reg_411 = dMap_data_stream_0_V_dout.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        tmp_26_i_i_reg_356 = tmp_26_i_i_fu_223_p2.read();
    }
}

void Loop_4_proc::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[2];
}

void Loop_4_proc::thread_ap_CS_fsm_pp0_stage1() {
    ap_CS_fsm_pp0_stage1 = ap_CS_fsm.read()[3];
}

void Loop_4_proc::thread_ap_CS_fsm_pp0_stage2() {
    ap_CS_fsm_pp0_stage2 = ap_CS_fsm.read()[4];
}

void Loop_4_proc::thread_ap_CS_fsm_pp0_stage3() {
    ap_CS_fsm_pp0_stage3 = ap_CS_fsm.read()[5];
}

void Loop_4_proc::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Loop_4_proc::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Loop_4_proc::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[6];
}

void Loop_4_proc::thread_ap_block_pp0_stage0() {
    ap_block_pp0_stage0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Loop_4_proc::thread_ap_block_pp0_stage0_01001() {
    ap_block_pp0_stage0_01001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_372.read()) && esl_seteq<1,1,1>(ap_const_logic_0, dMap_data_stream_0_V_empty_n.read()));
}

void Loop_4_proc::thread_ap_block_pp0_stage0_11001() {
    ap_block_pp0_stage0_11001 = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_372.read()) && 
   esl_seteq<1,1,1>(ap_const_logic_0, dMap_data_stream_0_V_empty_n.read())) || 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state7_io.read())));
}

void Loop_4_proc::thread_ap_block_pp0_stage0_subdone() {
    ap_block_pp0_stage0_subdone = (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_372.read()) && 
   esl_seteq<1,1,1>(ap_const_logic_0, dMap_data_stream_0_V_empty_n.read())) || 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state7_io.read())));
}

void Loop_4_proc::thread_ap_block_pp0_stage1() {
    ap_block_pp0_stage1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Loop_4_proc::thread_ap_block_pp0_stage1_11001() {
    ap_block_pp0_stage1_11001 = ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_372.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, dMap_data_stream_0_V_empty_n.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state8_io.read())));
}

void Loop_4_proc::thread_ap_block_pp0_stage1_subdone() {
    ap_block_pp0_stage1_subdone = ((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_372.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
  esl_seteq<1,1,1>(ap_const_logic_0, dMap_data_stream_0_V_empty_n.read())) || (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
  esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state8_io.read())));
}

void Loop_4_proc::thread_ap_block_pp0_stage2() {
    ap_block_pp0_stage2 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Loop_4_proc::thread_ap_block_pp0_stage2_11001() {
    ap_block_pp0_stage2_11001 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_372.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_0, dMap_data_stream_0_V_empty_n.read()));
}

void Loop_4_proc::thread_ap_block_pp0_stage2_subdone() {
    ap_block_pp0_stage2_subdone = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_372.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_0, dMap_data_stream_0_V_empty_n.read()));
}

void Loop_4_proc::thread_ap_block_pp0_stage3() {
    ap_block_pp0_stage3 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Loop_4_proc::thread_ap_block_pp0_stage3_11001() {
    ap_block_pp0_stage3_11001 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_372.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_0, dMap_data_stream_0_V_empty_n.read()));
}

void Loop_4_proc::thread_ap_block_pp0_stage3_subdone() {
    ap_block_pp0_stage3_subdone = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_372.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_const_logic_0, dMap_data_stream_0_V_empty_n.read()));
}

void Loop_4_proc::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, packets_loc_empty_n.read()));
}

void Loop_4_proc::thread_ap_block_state3_pp0_stage0_iter0() {
    ap_block_state3_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Loop_4_proc::thread_ap_block_state4_pp0_stage1_iter0() {
    ap_block_state4_pp0_stage1_iter0 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_372.read()) && esl_seteq<1,1,1>(ap_const_logic_0, dMap_data_stream_0_V_empty_n.read()));
}

void Loop_4_proc::thread_ap_block_state5_pp0_stage2_iter0() {
    ap_block_state5_pp0_stage2_iter0 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_372.read()) && esl_seteq<1,1,1>(ap_const_logic_0, dMap_data_stream_0_V_empty_n.read()));
}

void Loop_4_proc::thread_ap_block_state6_pp0_stage3_iter0() {
    ap_block_state6_pp0_stage3_iter0 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_372.read()) && esl_seteq<1,1,1>(ap_const_logic_0, dMap_data_stream_0_V_empty_n.read()));
}

void Loop_4_proc::thread_ap_block_state7_io() {
    ap_block_state7_io = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_372.read()) && esl_seteq<1,1,1>(ap_const_logic_0, dMapout_last_V_1_ack_in.read()));
}

void Loop_4_proc::thread_ap_block_state7_pp0_stage0_iter1() {
    ap_block_state7_pp0_stage0_iter1 = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_372.read()) && esl_seteq<1,1,1>(ap_const_logic_0, dMap_data_stream_0_V_empty_n.read()));
}

void Loop_4_proc::thread_ap_block_state8_io() {
    ap_block_state8_io = (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_372_pp0_iter1_reg.read()) && esl_seteq<1,1,1>(ap_const_logic_0, dMapout_last_V_1_ack_in.read()));
}

void Loop_4_proc::thread_ap_block_state8_pp0_stage1_iter1() {
    ap_block_state8_pp0_stage1_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Loop_4_proc::thread_ap_block_state9() {
    ap_block_state9 = (esl_seteq<1,1,1>(ap_const_logic_0, dMapout_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dMapout_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dMapout_user_V_1_ack_in.read()));
}

void Loop_4_proc::thread_ap_condition_pp0_exit_iter0_state3() {
    if (esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_flatten_fu_257_p2.read())) {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state3 = ap_const_logic_0;
    }
}

void Loop_4_proc::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, dMapout_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dMapout_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dMapout_user_V_1_ack_in.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void Loop_4_proc::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void Loop_4_proc::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Loop_4_proc::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void Loop_4_proc::thread_ap_phi_mux_i_op_assign_phi_fu_152_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_372.read()))) {
        ap_phi_mux_i_op_assign_phi_fu_152_p4 = i_op_assign_mid2_reg_391.read();
    } else {
        ap_phi_mux_i_op_assign_phi_fu_152_p4 = i_op_assign_reg_148.read();
    }
}

void Loop_4_proc::thread_ap_phi_mux_indvar_flatten_phi_fu_141_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_372.read()))) {
        ap_phi_mux_indvar_flatten_phi_fu_141_p4 = indvar_flatten_next_reg_376.read();
    } else {
        ap_phi_mux_indvar_flatten_phi_fu_141_p4 = indvar_flatten_reg_137.read();
    }
}

void Loop_4_proc::thread_ap_phi_mux_p_1_rec_i_i_phi_fu_163_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_372.read()))) {
        ap_phi_mux_p_1_rec_i_i_phi_fu_163_p4 = p_rec_i_i_reg_396.read();
    } else {
        ap_phi_mux_p_1_rec_i_i_phi_fu_163_p4 = p_1_rec_i_i_reg_159.read();
    }
}

void Loop_4_proc::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, dMapout_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dMapout_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dMapout_user_V_1_ack_in.read())))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Loop_4_proc::thread_bound_fu_251_p0() {
    bound_fu_251_p0 =  (sc_lv<30>) (bound_fu_251_p00.read());
}

void Loop_4_proc::thread_bound_fu_251_p00() {
    bound_fu_251_p00 = esl_zext<62,30>(tmp_68_fu_229_p4.read());
}

void Loop_4_proc::thread_bound_fu_251_p1() {
    bound_fu_251_p1 =  (sc_lv<32>) (bound_fu_251_p10.read());
}

void Loop_4_proc::thread_bound_fu_251_p10() {
    bound_fu_251_p10 = esl_zext<62,32>(rows_V.read());
}

void Loop_4_proc::thread_bound_fu_251_p2() {
    bound_fu_251_p2 = (!bound_fu_251_p0.read().is_01() || !bound_fu_251_p1.read().is_01())? sc_lv<62>(): sc_biguint<30>(bound_fu_251_p0.read()) * sc_biguint<32>(bound_fu_251_p1.read());
}

void Loop_4_proc::thread_dMap_data_stream_0_V_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_372.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_372.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_372.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_372.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3.read(), ap_const_boolean_0)))) {
        dMap_data_stream_0_V_blk_n = dMap_data_stream_0_V_empty_n.read();
    } else {
        dMap_data_stream_0_V_blk_n = ap_const_logic_1;
    }
}

void Loop_4_proc::thread_dMap_data_stream_0_V_read() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_372.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_372.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_372.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3_11001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_372.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0)))) {
        dMap_data_stream_0_V_read = ap_const_logic_1;
    } else {
        dMap_data_stream_0_V_read = ap_const_logic_0;
    }
}

void Loop_4_proc::thread_dMapout_TDATA() {
    dMapout_TDATA = dMapout_data_V_1_data_out.read();
}

void Loop_4_proc::thread_dMapout_TDATA_blk_n() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage0.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_372.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_372_pp0_iter1_reg.read())))) {
        dMapout_TDATA_blk_n = dMapout_data_V_1_state.read()[1];
    } else {
        dMapout_TDATA_blk_n = ap_const_logic_1;
    }
}

void Loop_4_proc::thread_dMapout_TLAST() {
    dMapout_TLAST = dMapout_last_V_1_data_out.read();
}

void Loop_4_proc::thread_dMapout_TUSER() {
    dMapout_TUSER = dMapout_user_V_1_data_out.read();
}

void Loop_4_proc::thread_dMapout_TVALID() {
    dMapout_TVALID = dMapout_last_V_1_state.read()[0];
}

void Loop_4_proc::thread_dMapout_data_V_1_ack_in() {
    dMapout_data_V_1_ack_in = dMapout_data_V_1_state.read()[1];
}

void Loop_4_proc::thread_dMapout_data_V_1_ack_out() {
    dMapout_data_V_1_ack_out = dMapout_TREADY.read();
}

void Loop_4_proc::thread_dMapout_data_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, dMapout_data_V_1_sel.read())) {
        dMapout_data_V_1_data_out = dMapout_data_V_1_payload_B.read();
    } else {
        dMapout_data_V_1_data_out = dMapout_data_V_1_payload_A.read();
    }
}

void Loop_4_proc::thread_dMapout_data_V_1_load_A() {
    dMapout_data_V_1_load_A = (dMapout_data_V_1_state_cmp_full.read() & ~dMapout_data_V_1_sel_wr.read());
}

void Loop_4_proc::thread_dMapout_data_V_1_load_B() {
    dMapout_data_V_1_load_B = (dMapout_data_V_1_sel_wr.read() & dMapout_data_V_1_state_cmp_full.read());
}

void Loop_4_proc::thread_dMapout_data_V_1_sel() {
    dMapout_data_V_1_sel = dMapout_data_V_1_sel_rd.read();
}

void Loop_4_proc::thread_dMapout_data_V_1_state_cmp_full() {
    dMapout_data_V_1_state_cmp_full =  (sc_logic) ((!dMapout_data_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(dMapout_data_V_1_state.read() != ap_const_lv2_1))[0];
}

void Loop_4_proc::thread_dMapout_data_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_372.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        dMapout_data_V_1_vld_in = ap_const_logic_1;
    } else {
        dMapout_data_V_1_vld_in = ap_const_logic_0;
    }
}

void Loop_4_proc::thread_dMapout_data_V_1_vld_out() {
    dMapout_data_V_1_vld_out = dMapout_data_V_1_state.read()[0];
}

void Loop_4_proc::thread_dMapout_last_V_1_ack_in() {
    dMapout_last_V_1_ack_in = dMapout_last_V_1_state.read()[1];
}

void Loop_4_proc::thread_dMapout_last_V_1_ack_out() {
    dMapout_last_V_1_ack_out = dMapout_TREADY.read();
}

void Loop_4_proc::thread_dMapout_last_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, dMapout_last_V_1_sel.read())) {
        dMapout_last_V_1_data_out = dMapout_last_V_1_payload_B.read();
    } else {
        dMapout_last_V_1_data_out = dMapout_last_V_1_payload_A.read();
    }
}

void Loop_4_proc::thread_dMapout_last_V_1_load_A() {
    dMapout_last_V_1_load_A = (dMapout_last_V_1_state_cmp_full.read() & ~dMapout_last_V_1_sel_wr.read());
}

void Loop_4_proc::thread_dMapout_last_V_1_load_B() {
    dMapout_last_V_1_load_B = (dMapout_last_V_1_sel_wr.read() & dMapout_last_V_1_state_cmp_full.read());
}

void Loop_4_proc::thread_dMapout_last_V_1_sel() {
    dMapout_last_V_1_sel = dMapout_last_V_1_sel_rd.read();
}

void Loop_4_proc::thread_dMapout_last_V_1_state_cmp_full() {
    dMapout_last_V_1_state_cmp_full =  (sc_logic) ((!dMapout_last_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(dMapout_last_V_1_state.read() != ap_const_lv2_1))[0];
}

void Loop_4_proc::thread_dMapout_last_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_372.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        dMapout_last_V_1_vld_in = ap_const_logic_1;
    } else {
        dMapout_last_V_1_vld_in = ap_const_logic_0;
    }
}

void Loop_4_proc::thread_dMapout_last_V_1_vld_out() {
    dMapout_last_V_1_vld_out = dMapout_last_V_1_state.read()[0];
}

void Loop_4_proc::thread_dMapout_last_V_tmp_fu_309_p3() {
    dMapout_last_V_tmp_fu_309_p3 = (!exitcond3_i_i7_fu_286_p2.read()[0].is_01())? sc_lv<1>(): ((exitcond3_i_i7_fu_286_p2.read()[0].to_bool())? tmp_32_i_i_mid1_fu_299_p2.read(): tmp_32_i_i2_fu_304_p2.read());
}

void Loop_4_proc::thread_dMapout_user_V_1_ack_in() {
    dMapout_user_V_1_ack_in = dMapout_user_V_1_state.read()[1];
}

void Loop_4_proc::thread_dMapout_user_V_1_ack_out() {
    dMapout_user_V_1_ack_out = dMapout_TREADY.read();
}

void Loop_4_proc::thread_dMapout_user_V_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, dMapout_user_V_1_sel.read())) {
        dMapout_user_V_1_data_out = dMapout_user_V_1_payload_B.read();
    } else {
        dMapout_user_V_1_data_out = dMapout_user_V_1_payload_A.read();
    }
}

void Loop_4_proc::thread_dMapout_user_V_1_load_A() {
    dMapout_user_V_1_load_A = (dMapout_user_V_1_state_cmp_full.read() & ~dMapout_user_V_1_sel_wr.read());
}

void Loop_4_proc::thread_dMapout_user_V_1_load_B() {
    dMapout_user_V_1_load_B = (dMapout_user_V_1_sel_wr.read() & dMapout_user_V_1_state_cmp_full.read());
}

void Loop_4_proc::thread_dMapout_user_V_1_sel() {
    dMapout_user_V_1_sel = dMapout_user_V_1_sel_rd.read();
}

void Loop_4_proc::thread_dMapout_user_V_1_state_cmp_full() {
    dMapout_user_V_1_state_cmp_full =  (sc_logic) ((!dMapout_user_V_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(dMapout_user_V_1_state.read() != ap_const_lv2_1))[0];
}

void Loop_4_proc::thread_dMapout_user_V_1_vld_in() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_flatten_reg_372.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_11001.read(), ap_const_boolean_0))) {
        dMapout_user_V_1_vld_in = ap_const_logic_1;
    } else {
        dMapout_user_V_1_vld_in = ap_const_logic_0;
    }
}

void Loop_4_proc::thread_dMapout_user_V_1_vld_out() {
    dMapout_user_V_1_vld_out = dMapout_user_V_1_state.read()[0];
}

void Loop_4_proc::thread_dMapout_user_V_tmp_fu_291_p3() {
    dMapout_user_V_tmp_fu_291_p3 = (!exitcond3_i_i7_fu_286_p2.read()[0].is_01())? sc_lv<1>(): ((exitcond3_i_i7_fu_286_p2.read()[0].to_bool())? tmp_31_i_i_mid1_fu_274_p2.read(): tmp_31_i_i3_fu_280_p2.read());
}

void Loop_4_proc::thread_exitcond3_i_i7_fu_286_p2() {
    exitcond3_i_i7_fu_286_p2 = (!ap_phi_mux_p_1_rec_i_i_phi_fu_163_p4.read().is_01() || !tmp_14_cast_i_i_fu_239_p1.read().is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_p_1_rec_i_i_phi_fu_163_p4.read() == tmp_14_cast_i_i_fu_239_p1.read());
}

void Loop_4_proc::thread_exitcond_flatten_fu_257_p2() {
    exitcond_flatten_fu_257_p2 = (!ap_phi_mux_indvar_flatten_phi_fu_141_p4.read().is_01() || !bound_fu_251_p2.read().is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_indvar_flatten_phi_fu_141_p4.read() == bound_fu_251_p2.read());
}

void Loop_4_proc::thread_i_op_assign_mid2_fu_317_p3() {
    i_op_assign_mid2_fu_317_p3 = (!exitcond3_i_i7_fu_286_p2.read()[0].is_01())? sc_lv<32>(): ((exitcond3_i_i7_fu_286_p2.read()[0].to_bool())? r_fu_268_p2.read(): ap_phi_mux_i_op_assign_phi_fu_152_p4.read());
}

void Loop_4_proc::thread_indvar_flatten_next_fu_262_p2() {
    indvar_flatten_next_fu_262_p2 = (!ap_phi_mux_indvar_flatten_phi_fu_141_p4.read().is_01() || !ap_const_lv62_1.is_01())? sc_lv<62>(): (sc_biguint<62>(ap_phi_mux_indvar_flatten_phi_fu_141_p4.read()) + sc_biguint<62>(ap_const_lv62_1));
}

void Loop_4_proc::thread_p_1_rec_i_i_op_fu_325_p2() {
    p_1_rec_i_i_op_fu_325_p2 = (!ap_phi_mux_p_1_rec_i_i_phi_fu_163_p4.read().is_01() || !ap_const_lv31_1.is_01())? sc_lv<31>(): (sc_biguint<31>(ap_phi_mux_p_1_rec_i_i_phi_fu_163_p4.read()) + sc_biguint<31>(ap_const_lv31_1));
}

void Loop_4_proc::thread_p_Result_s_fu_339_p5() {
    p_Result_s_fu_339_p5 = esl_concat<24,8>(esl_concat<16,8>(esl_concat<8,8>(dMap_data_stream_0_V_dout.read(), tmp_153_reg_411.read()), tmp_152_reg_406.read()), tmp_151_reg_401.read());
}

void Loop_4_proc::thread_p_lshr_f_i_i_fu_202_p4() {
    p_lshr_f_i_i_fu_202_p4 = packets_loc_read_reg_349.read().range(31, 1);
}

void Loop_4_proc::thread_p_lshr_i_i_fu_182_p4() {
    p_lshr_i_i_fu_182_p4 = p_neg_i_i_fu_177_p2.read().range(31, 1);
}

void Loop_4_proc::thread_p_neg_i_i_fu_177_p2() {
    p_neg_i_i_fu_177_p2 = (!ap_const_lv32_0.is_01() || !packets_loc_read_reg_349.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_0) - sc_biguint<32>(packets_loc_read_reg_349.read()));
}

void Loop_4_proc::thread_p_neg_t_i_i_fu_196_p2() {
    p_neg_t_i_i_fu_196_p2 = (!ap_const_lv32_0.is_01() || !tmp_s_fu_192_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_0) - sc_biguint<32>(tmp_s_fu_192_p1.read()));
}

void Loop_4_proc::thread_p_rec_i_i_fu_331_p3() {
    p_rec_i_i_fu_331_p3 = (!exitcond3_i_i7_fu_286_p2.read()[0].is_01())? sc_lv<31>(): ((exitcond3_i_i7_fu_286_p2.read()[0].to_bool())? ap_const_lv31_1: p_1_rec_i_i_op_fu_325_p2.read());
}

void Loop_4_proc::thread_packets_loc_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        packets_loc_blk_n = packets_loc_empty_n.read();
    } else {
        packets_loc_blk_n = ap_const_logic_1;
    }
}

void Loop_4_proc::thread_packets_loc_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, packets_loc_empty_n.read())))) {
        packets_loc_read = ap_const_logic_1;
    } else {
        packets_loc_read = ap_const_logic_0;
    }
}

void Loop_4_proc::thread_r_fu_268_p2() {
    r_fu_268_p2 = (!ap_phi_mux_i_op_assign_phi_fu_152_p4.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_biguint<32>(ap_phi_mux_i_op_assign_phi_fu_152_p4.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void Loop_4_proc::thread_tmp_14_cast_i_i_fu_239_p1() {
    tmp_14_cast_i_i_fu_239_p1 = esl_zext<31,30>(tmp_68_fu_229_p4.read());
}

void Loop_4_proc::thread_tmp_25_i_i_fu_215_p3() {
    tmp_25_i_i_fu_215_p3 = (!tmp_fu_170_p3.read()[0].is_01())? sc_lv<32>(): ((tmp_fu_170_p3.read()[0].to_bool())? p_neg_t_i_i_fu_196_p2.read(): tmp_67_fu_211_p1.read());
}

void Loop_4_proc::thread_tmp_26_i_i_fu_223_p2() {
    tmp_26_i_i_fu_223_p2 = (!tmp_25_i_i_fu_215_p3.read().is_01() || !ap_const_lv32_FFFFFFFF.is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_25_i_i_fu_215_p3.read()) + sc_bigint<32>(ap_const_lv32_FFFFFFFF));
}

void Loop_4_proc::thread_tmp_31_i_i3_fu_280_p2() {
    tmp_31_i_i3_fu_280_p2 = (!ap_phi_mux_i_op_assign_phi_fu_152_p4.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_i_op_assign_phi_fu_152_p4.read() == ap_const_lv32_0);
}

void Loop_4_proc::thread_tmp_31_i_i_mid1_fu_274_p2() {
    tmp_31_i_i_mid1_fu_274_p2 = (!r_fu_268_p2.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(r_fu_268_p2.read() == ap_const_lv32_0);
}

void Loop_4_proc::thread_tmp_32_i_i2_fu_304_p2() {
    tmp_32_i_i2_fu_304_p2 = (!ap_phi_mux_i_op_assign_phi_fu_152_p4.read().is_01() || !tmp_26_i_i_reg_356.read().is_01())? sc_lv<1>(): sc_lv<1>(ap_phi_mux_i_op_assign_phi_fu_152_p4.read() == tmp_26_i_i_reg_356.read());
}

void Loop_4_proc::thread_tmp_32_i_i_mid1_fu_299_p2() {
    tmp_32_i_i_mid1_fu_299_p2 = (!r_fu_268_p2.read().is_01() || !tmp_26_i_i_reg_356.read().is_01())? sc_lv<1>(): sc_lv<1>(r_fu_268_p2.read() == tmp_26_i_i_reg_356.read());
}

void Loop_4_proc::thread_tmp_67_fu_211_p1() {
    tmp_67_fu_211_p1 = esl_zext<32,31>(p_lshr_f_i_i_fu_202_p4.read());
}

void Loop_4_proc::thread_tmp_68_fu_229_p4() {
    tmp_68_fu_229_p4 = cols_V.read().range(31, 2);
}

void Loop_4_proc::thread_tmp_fu_170_p3() {
    tmp_fu_170_p3 = packets_loc_read_reg_349.read().range(31, 31);
}

void Loop_4_proc::thread_tmp_s_fu_192_p1() {
    tmp_s_fu_192_p1 = esl_zext<32,31>(p_lshr_i_i_fu_182_p4.read());
}

void Loop_4_proc::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, packets_loc_empty_n.read())))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_flatten_fu_257_p2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_flatten_fu_257_p2.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_subdone.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            }
            break;
        case 16 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage2_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            }
            break;
        case 32 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage3_subdone.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            }
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, dMapout_last_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dMapout_data_V_1_ack_in.read()) || esl_seteq<1,1,1>(ap_const_logic_0, dMapout_user_V_1_ack_in.read())))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        default : 
            ap_NS_fsm = "XXXXXXX";
            break;
    }
}

}

