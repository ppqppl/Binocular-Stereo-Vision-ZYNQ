// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.3
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Block_arrayctor_loop_HH_
#define _Block_arrayctor_loop_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct Block_arrayctor_loop : public sc_module {
    // Port declarations 17
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_in< sc_logic > start_full_n;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > start_out;
    sc_out< sc_logic > start_write;
    sc_in< sc_lv<32> > cols_V;
    sc_in< sc_lv<32> > rows_V;
    sc_out< sc_lv<32> > packets_out_out_din;
    sc_in< sc_logic > packets_out_out_full_n;
    sc_out< sc_logic > packets_out_out_write;
    sc_out< sc_lv<32> > ap_return_0;
    sc_out< sc_lv<63> > ap_return_1;


    // Module declarations
    Block_arrayctor_loop(sc_module_name name);
    SC_HAS_PROCESS(Block_arrayctor_loop);

    ~Block_arrayctor_loop();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > real_start;
    sc_signal< sc_logic > start_once_reg;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<2> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > internal_ap_ready;
    sc_signal< sc_logic > packets_out_out_blk_n;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<31> > col_packets_fu_59_p4;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<32> > col_packets_1_fu_69_p1;
    sc_signal< sc_lv<31> > packets_fu_73_p0;
    sc_signal< sc_lv<32> > packets_fu_73_p1;
    sc_signal< sc_lv<63> > tmp_cast_out_fu_79_p1;
    sc_signal< sc_lv<2> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<2> ap_ST_fsm_state1;
    static const sc_lv<2> ap_ST_fsm_state2;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_1F;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_block_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return_0();
    void thread_ap_return_1();
    void thread_col_packets_1_fu_69_p1();
    void thread_col_packets_fu_59_p4();
    void thread_internal_ap_ready();
    void thread_packets_fu_73_p0();
    void thread_packets_fu_73_p1();
    void thread_packets_out_out_blk_n();
    void thread_packets_out_out_din();
    void thread_packets_out_out_write();
    void thread_real_start();
    void thread_start_out();
    void thread_start_write();
    void thread_tmp_cast_out_fu_79_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
